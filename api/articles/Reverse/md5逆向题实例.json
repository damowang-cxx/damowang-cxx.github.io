{"title":"md5逆向题实例","uid":"4b1fbc501a26eea6619e2e89180a8452","slug":"Reverse/md5逆向题实例","date":"2022-03-15T02:48:39.000Z","updated":"2022-03-28T10:30:41.348Z","comments":true,"path":"api/articles/Reverse/md5逆向题实例.json","keywords":null,"cover":"http://img.kofdevil.cn/boke/v2-38a9a89aef6c3e6209cebb315eaf09a0.jpg","content":"<h1 id=\"知识点：\"><a href=\"#知识点：\" class=\"headerlink\" title=\"知识点：\"></a>知识点：</h1><table>\n<thead>\n<tr>\n<th>rtf文件</th>\n<th><a href=\"https://magnificent-syrup-61f.notion.site/rtf-e2d961992a914f4eab37f3356db9e994\">https://magnificent-syrup-61f.notion.site/rtf-e2d961992a914f4eab37f3356db9e994</a></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>atoi&#x2F;itoa函数</td>\n<td><a href=\"https://magnificent-syrup-61f.notion.site/atoi-itoa-a9be71db8a864e128429d4e826a1ec2d\">https://magnificent-syrup-61f.notion.site/atoi-itoa-a9be71db8a864e128429d4e826a1ec2d</a></td>\n</tr>\n<tr>\n<td>python的hashlib库</td>\n<td><a href=\"https://magnificent-syrup-61f.notion.site/python-hashlib-0c3d02fa25e9444d88b9d5ed30d25eb0\">https://magnificent-syrup-61f.notion.site/python-hashlib-0c3d02fa25e9444d88b9d5ed30d25eb0</a></td>\n</tr>\n</tbody></table>\n<h1 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h1><h2 id=\"前期分析：\"><a href=\"#前期分析：\" class=\"headerlink\" title=\"前期分析：\"></a>前期分析：</h2><p><img src=\"http://img.kofdevil.cn/boke/image-20220315105107600.png\" alt=\"image-20220315105107600\"></p>\n<p>无壳，32位</p>\n<h2 id=\"ida分析：\"><a href=\"#ida分析：\" class=\"headerlink\" title=\"ida分析：\"></a>ida分析：</h2><p>主函数的代码：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main_0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  DWORD v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span>\n  DWORD v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span>\n  <span class=\"token keyword\">char</span> Str<span class=\"token punctuation\">[</span><span class=\"token number\">260</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+4Ch] [ebp-310h] BYREF</span>\n  <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+150h] [ebp-20Ch]</span>\n  <span class=\"token keyword\">char</span> String1<span class=\"token punctuation\">[</span><span class=\"token number\">260</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+154h] [ebp-208h] BYREF</span>\n  <span class=\"token keyword\">char</span> Destination<span class=\"token punctuation\">[</span><span class=\"token number\">260</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+258h] [ebp-104h] BYREF</span>\n\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>String1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>String1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  v7 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pls input the first passwd(1): \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> Destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\">//输入第一个密码</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>Destination<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">)</span>             <span class=\"token comment\">//密码长度为6</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Must be 6 characters!\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ExitProcess</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  v7 <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>Destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">//将数字字符准换为整型数据</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v7 <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">ExitProcess</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>Destination<span class=\"token punctuation\">,</span> <span class=\"token string\">\"@DBApp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//在密码字符串后面加上@DBApp</span>\n  v3 <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>Destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sub_40100A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>Destination<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">,</span> String1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//跳入这个加密函数(这是解开密码1的关键函数)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">_strcmpi</span><span class=\"token punctuation\">(</span>String1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"6E32D0943418C2C33385BC35A1470250DD8923A9\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>  <span class=\"token comment\">//经过函数加密后与</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"continue...\\\\n\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pls input the first passwd(2): \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Must be 6 characters!\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">ExitProcess</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">strcat</span><span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">,</span> Destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>String1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>String1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v4 <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sub_401019</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>Str<span class=\"token punctuation\">,</span> v4<span class=\"token punctuation\">,</span> String1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">_strcmpi</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"27019e688a4e62a649fd99cadaafdb4e\"</span><span class=\"token punctuation\">,</span> String1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8<span class=\"token punctuation\">)</span><span class=\"token function\">sub_40100F</span><span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error!!\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ExitProcess</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bye ~~\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>程序大概就是两次的密码验证</p>\n<ul>\n<li><p>首先分析第一个加密函数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">sub_401230</span><span class=\"token punctuation\">(</span>BYTE <span class=\"token operator\">*</span>pbData<span class=\"token punctuation\">,</span> DWORD dwDataLen<span class=\"token punctuation\">,</span> LPSTR lpString1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span>\n  DWORD i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+4Ch] [ebp-28h]</span>\n  CHAR String2<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+50h] [ebp-24h] BYREF</span>\n  BYTE v6<span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+54h] [ebp-20h] BYREF</span>\n  DWORD pdwDataLen<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+68h] [ebp-Ch] BYREF</span>\n  HCRYPTHASH phHash<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+6Ch] [ebp-8h] BYREF</span>\n  HCRYPTPROV phProv<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+70h] [ebp-4h] BYREF</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">CryptAcquireContextA</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>phProv<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF0000000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">CryptCreateHash</span><span class=\"token punctuation\">(</span>phProv<span class=\"token punctuation\">,</span> <span class=\"token number\">0x8004u</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>phHash<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">CryptHashData</span><span class=\"token punctuation\">(</span>phHash<span class=\"token punctuation\">,</span> pbData<span class=\"token punctuation\">,</span> dwDataLen<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">CryptGetHashParam</span><span class=\"token punctuation\">(</span>phHash<span class=\"token punctuation\">,</span> <span class=\"token number\">2u</span><span class=\"token punctuation\">,</span> v6<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pdwDataLen<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token operator\">*</span>lpString1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> pdwDataLen<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">wsprintfA</span><span class=\"token punctuation\">(</span>String2<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%02X\"</span><span class=\"token punctuation\">,</span> v6<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">lstrcatA</span><span class=\"token punctuation\">(</span>lpString1<span class=\"token punctuation\">,</span> String2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      <span class=\"token function\">CryptDestroyHash</span><span class=\"token punctuation\">(</span>phHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">CryptReleaseContext</span><span class=\"token punctuation\">(</span>phProv<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">CryptDestroyHash</span><span class=\"token punctuation\">(</span>phHash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">CryptReleaseContext</span><span class=\"token punctuation\">(</span>phProv<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">CryptReleaseContext</span><span class=\"token punctuation\">(</span>phProv<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>粗略看一下被调用的函数指向的算法为单向散列算法hash。</p>\n<p>百度一下这些函数已经被弃用了，主要的函数是：</p>\n<ul>\n<li><p>CryptCreateHash( )</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">BOOL <span class=\"token function\">CryptAcquireContextA</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span>out<span class=\"token punctuation\">]</span> HCRYPTPROV <span class=\"token operator\">*</span>phProv<span class=\"token punctuation\">,</span>     \\\\\\\\通过调用 CryptAcquireContext创建的 CSP 的句柄。\n  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>  LPCSTR     szProvider<span class=\"token punctuation\">,</span>  \\\\\\\\标识要使用的哈希算法的ALG_ID值<span class=\"token punctuation\">(</span>要使用哪种加密算法<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>  DWORD      dwProvType<span class=\"token punctuation\">,</span>  \\\\\\\\如果散列算法的类型是键控散列，例如基于散列的消息验证码<span class=\"token punctuation\">(</span>HMAC<span class=\"token punctuation\">)</span> 或消息验证码<span class=\"token punctuation\">(</span>MAC<span class=\"token punctuation\">)</span> 算法，则在此参数中传递散列的密钥。对于非键控算法，此参数必须设置为零。\n  <span class=\"token punctuation\">[</span>in<span class=\"token punctuation\">]</span>  DWORD      dwFlags      \\\\\\\\函数将句柄复制到新哈希对象的地址。使用完散列对象后，通过调用CryptDestroyHash函数释放句柄。\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>核心成员是第二个它标识着用到的算法是哪一个</p>\n<ul>\n<li>LPCSTR的ALG_ID：具体算法与数值对应关系</li>\n</ul>\n</li>\n</ul>\n<p>通过特征码<code>8004</code>，确定散列算法为<code>SHA1</code>,思路基本确定为爆破枚举，而且已知密码的前6位有数字组成后面加上六个字符<code>@DBApp</code> 。</p>\n<p>exp为：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">import hashlib\nrflag<span class=\"token operator\">=</span>'<span class=\"token number\">6E32</span>D0943418C2C33385BC35A1470250DD8923A9'<span class=\"token punctuation\">.</span><span class=\"token function\">lower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstr1<span class=\"token operator\">=</span><span class=\"token char\">'@DBApp'</span>\n\n<span class=\"token keyword\">for</span> i in <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100000</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    flag<span class=\"token operator\">=</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>str1            #需要用str将整型转成字符串<span class=\"token punctuation\">,</span>达到三者数据类型相匹配\n    obj<span class=\"token operator\">=</span>hashlib<span class=\"token punctuation\">.</span><span class=\"token function\">sha1</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    flag<span class=\"token operator\">=</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hexdigest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> flag<span class=\"token operator\">==</span>rflag<span class=\"token operator\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\n<span class=\"token char\">''</span>'\n这里有一点需要注意hashlib加密后的十六进制的字母是以小写的形式，\n所以上面的判断直接比较的话一定会找不到，需要用字符串操作“lower”方法\n将rflag字串的大写字符转小写\n<span class=\"token char\">''</span>'<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h2 id=\"解体方式：\"><a href=\"#解体方式：\" class=\"headerlink\" title=\"解体方式：\"></a>解体方式：</h2><p>  得出第一轮的密码为：123321</p>\n<p>  <img src=\"http://img.kofdevil.cn/boke/image-20220315105251770.png\" alt=\"image-20220315105251770\"><br>  跟进第二个函数还是hash，看特征码8003，是MD5。但这里遇到一个问题就是它没有规定这六个是什么字符，这要是爆破的话，难度大了许多，但是路见不平绕道而行，我们用别的办法：</p>\n<ul>\n<li><p>思路为在线网站解密hash</p>\n<p>  我们已经知道了hash值，可以考虑直接去在线网站解密，然后直接得出两个密码</p>\n<p>  <img src=\"http://img.kofdevil.cn/boke/image-20220315105409896.png\" alt=\"image-20220315105409896\"></p>\n<p>  这样密码就都到手了：</p>\n<p>  密码1：123321</p>\n<p>  密码2：~!3a@0</p>\n<p>  分别输入这两个密码：</p>\n<p>  <img src=\"http://img.kofdevil.cn/boke/image-20220315105443069.png\" alt=\"image-20220315105443069\"></p>\n<p>  同一目录下就会出现一个文件：</p>\n<p>  <img src=\"http://img.kofdevil.cn/boke/image-20220315105454068.png\" alt=\"image-20220315105454068\"></p>\n<p>  打开就是flag</p>\n</li>\n</ul>\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315105528766.png\" alt=\"image-20220315105528766\"></p>\n","feature":false,"text":"知识点： rtf文件 https://magnificent-syrup-61f.notion.site/rtf-e2d961992a914f4eab37f3356db9e994 atoi&#x2F;itoa函数 https://magnificent-syrup-61f.not...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"Reverse","slug":"Reverse","count":11,"path":"api/categories/Reverse.json"}],"tags":[{"name":"WP","slug":"WP","count":12,"path":"api/tags/WP.json"},{"name":"算法实例分析","slug":"算法实例分析","count":7,"path":"api/tags/算法实例分析.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%9A\"><span class=\"toc-text\">知识点：</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%A2%98%E8%A7%A3\"><span class=\"toc-text\">题解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E6%9C%9F%E5%88%86%E6%9E%90%EF%BC%9A\"><span class=\"toc-text\">前期分析：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ida%E5%88%86%E6%9E%90%EF%BC%9A\"><span class=\"toc-text\">ida分析：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E4%BD%93%E6%96%B9%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">解体方式：</span></a></li></ol></li></ol>","author":{"name":"Big Devils","slug":"blog-author","avatar":"http://r9eglxl35.hn-bkt.clouddn.com//-77bc1d189fd53f98.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"mapped":true,"prev_post":{"title":"Crypto脑图","uid":"3fffde4c087696455aa9600680b2d3ff","slug":"Crypto/Crypto脑图","date":"2022-03-15T07:17:46.000Z","updated":"2022-03-28T10:30:41.355Z","comments":true,"path":"api/articles/Crypto/Crypto脑图.json","keywords":null,"cover":"http://img.kofdevil.cn/boke/mmexport16071984.jpg","text":"加密一般分为对称加密(Symmetric Key Encryption)和非对称加密(Asymmetric Key Encryption)。 对称加密又分为分组加密和序列密码。 分组密码，也叫块加密(block cyphers)，一次加密明文中的一个块。是将明文按一定的位长分组，...","link":"","photos":[],"count_time":{"symbolsCount":276,"symbolsTime":"1 mins."},"categories":[{"name":"Crypto","slug":"Crypto","count":4,"path":"api/categories/Crypto.json"}],"tags":[],"author":{"name":"Big Devils","slug":"blog-author","avatar":"http://r9eglxl35.hn-bkt.clouddn.com//-77bc1d189fd53f98.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"feature":false},"next_post":{"title":"md5算法分析","uid":"0c474fb1f1d514e490492b4c7d30611c","slug":"Crypto/md5算法分析","date":"2022-03-15T01:45:46.000Z","updated":"2022-03-28T10:30:41.355Z","comments":true,"path":"api/articles/Crypto/md5算法分析.json","keywords":null,"cover":"http://img.kofdevil.cn/boke/IMG_20210803_005143.jpg","text":"前言：MD5消息摘要算法(Message Digest Algorithm)，它对输入的任意长度的消息进行运算，产生一个128位的消息摘要。 算法原理：1.数据填充：对原数据进行消息填充，使其长度取余512余448(448 mod 512)。换句话说就是填充后的数据长度比512的...","link":"","photos":[],"count_time":{"symbolsCount":746,"symbolsTime":"1 mins."},"categories":[{"name":"Crypto","slug":"Crypto","count":4,"path":"api/categories/Crypto.json"}],"tags":[{"name":"reverse常见算法","slug":"reverse常见算法","count":3,"path":"api/tags/reverse常见算法.json"}],"author":{"name":"Big Devils","slug":"blog-author","avatar":"http://r9eglxl35.hn-bkt.clouddn.com//-77bc1d189fd53f98.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"feature":false}}