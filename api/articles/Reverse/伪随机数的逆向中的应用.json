{"title":"伪随机数的逆向中的应用","uid":"b987f7dbe9c05bec0f7dc95b74539bc9","slug":"Reverse/伪随机数的逆向中的应用","date":"2022-03-21T14:33:28.000Z","updated":"2022-03-28T10:30:41.337Z","comments":true,"path":"api/articles/Reverse/伪随机数的逆向中的应用.json","keywords":null,"cover":"http://img.kofdevil.cn/boke/nullb93dc7ca5eee2.jpg","content":"<h1 id=\"1-伪随机数介绍：\"><a href=\"#1-伪随机数介绍：\" class=\"headerlink\" title=\"1.伪随机数介绍：\"></a>1.伪随机数介绍：</h1><h2 id=\"1-伪随机数的运行机制：\"><a href=\"#1-伪随机数的运行机制：\" class=\"headerlink\" title=\"1.伪随机数的运行机制：\"></a>1.伪随机数的运行机制：</h2><p>假设有<code>a1=f(seed)</code> ，<code>an+1=f(an)</code>，那么就可以得到一个序列<code>a1，a2，a3...an</code> 制作一个伪随机数也就是让其每次返回序列的下一个元素，如图：</p>\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220321224011130.png\" alt=\"image-20220321224011130\"></p>\n<p>对于<code>java.utiol.Random</code>，比较老的C语言的<code>rand()</code>库，和一部分php的<code>rand()</code>，它们使用的就是这种线性的随机数方法。这种方法一开始一般会取一个48bit的值作为seed直接放到state0里，而每个新的state的产生方式则为： <code>next_state=(state * multiplier + addend) mod (2 ^ precision)</code> （state为老的state，后面三个为固定的常量(<code>multiplier</code>&#x3D;25214903917,<code>addend</code> &#x3D; 11,<code>precision</code> &#x3D; 48)）。而从state计算到output的过程如下图：</p>\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220321224058310.png\" alt=\"image-20220321224058310\"></p>\n<p>output：为原数据右移16位之后的32比特的数据</p>\n<h2 id=\"2-C语言中的随机数函数：-rand-srand\"><a href=\"#2-C语言中的随机数函数：-rand-srand\" class=\"headerlink\" title=\"2.C语言中的随机数函数：(rand,srand)\"></a>2.C语言中的随机数函数：(rand,srand)</h2><p>rand和srand是用于产生伪随机数的两个函数，其返回值为[0,RAND_MAX]之间的数据</p>\n<h3 id=\"1-rand函数：\"><a href=\"#1-rand函数：\" class=\"headerlink\" title=\"1.rand函数：\"></a>1.rand函数：</h3><p><code>rand()</code>函数是使用线性同余法做的，它并不是真的随机数，因为其周期特别长，所以在一定范围内可以看成随机的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n头文件<span class=\"token operator\">:</span> stdlib<span class=\"token punctuation\">.</span>h\n用户未设定随机数种子时，系统默认的随机数种子为<span class=\"token number\">1</span>。\n<span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>产生的是伪随机数字，每次执行时是相同的<span class=\"token punctuation\">;</span>若要不同<span class=\"token punctuation\">,</span>用函数<span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>初始化它。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-srand函数：\"><a href=\"#2-srand函数：\" class=\"headerlink\" title=\"2.srand函数：\"></a>2.srand函数：</h3><p><code>srand()</code>为初始化随机数发生器，用于设置rand()产生随机数时的种子</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> seed<span class=\"token punctuation\">)</span>\n头文件<span class=\"token operator\">:</span> stdlib<span class=\"token punctuation\">.</span>h\n功能：初始化随机数发生器\n<span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>用来设置<span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>产生随机数时的随机数种子。\n参数seed必须是个整数，如果每次seed都设相同值，<span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>所产生的随机数值每次就会一样。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>tips</p>\n<p>一般为了srand值相同导致的产生随机数值相同，随机数种子考虑使用时间(<code>srand(time(NULL))</code>)</p>\n</li>\n</ul>\n<h1 id=\"2-关于随机数的攻击方式：\"><a href=\"#2-关于随机数的攻击方式：\" class=\"headerlink\" title=\"2.关于随机数的攻击方式：\"></a>2.关于随机数的攻击方式：</h1><p>对于随机的攻击来说可以分为两种情况考虑，一种是可以通过逆向算法来获取到随机数的情况，另一种是只能得到生成的随机数，需要想办法逆推出种子的情况。</p>\n<h2 id=\"情况一：根据算法推出种子\"><a href=\"#情况一：根据算法推出种子\" class=\"headerlink\" title=\"情况一：根据算法推出种子\"></a>情况一：根据算法推出种子</h2><p>这种情况基本就是看它的随机数是怎么得出来的，目前见过的都是建立方程组然后用z3约束器求解</p>\n<h2 id=\"情况二：根据生成的随机数推出种子\"><a href=\"#情况二：根据生成的随机数推出种子\" class=\"headerlink\" title=\"情况二：根据生成的随机数推出种子\"></a>情况二：根据生成的随机数推出种子</h2><h3 id=\"ATTACK1：\"><a href=\"#ATTACK1：\" class=\"headerlink\" title=\"ATTACK1：\"></a>ATTACK1：</h3><p>当我们能够获得两个连续的output时：</p>\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220325152403040.png\" alt=\"image-20220325152403040\"></p>\n<p>假设获得到的output为0和1，state0右移十六位得出out0，state1右移十六位得出out1，设state的右16位为x，可设立方程<code>out0&lt;&lt;16+x=state0</code> ，将这个带着x的state0做线性变换就可以得出state1，再将带着x的state1右移16位则得到了out1,。通过建立方程得出state0后就可以得出所有的state(这里可能会有疑问明明是一元一次方程为啥还需要知道state1，因为右移的操作可能会导致有多个x的值加上左移16位后的out0等于state0，为了确定是哪个所以需要state1)</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> v1 <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextlnt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> v2 <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextlnt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">65535</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">long</span> state <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">65535</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">*</span> multiplier <span class=\"token operator\">+</span> addend<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">)</span> <span class=\"token operator\">>>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> v2<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Seed found:\"</span> <span class=\"token operator\">+</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>multiplier &#x3D; 25214903917</li>\n<li>addend &#x3D; 11</li>\n<li>next_state &#x3D; (state  * multiplier + addend) &amp; 0xFFFFFFFFFFFF</li>\n<li>outout &#x3D; state &gt;&gt; 16</li>\n</ul>\n","feature":false,"text":"1.伪随机数介绍：1.伪随机数的运行机制：假设有a1=f(seed) ，an+1=f(an)，那么就可以得到一个序列a1，a2，a3...an 制作一个伪随机数也就是让其每次返回序列的下一个元素，如图： 对于java.utiol.Random，比较老的C语言的rand()库，和一...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"Reverse","slug":"Reverse","count":11,"path":"api/categories/Reverse.json"}],"tags":[{"name":"C","slug":"C","count":1,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%BB%8B%E7%BB%8D%EF%BC%9A\"><span class=\"toc-text\">1.伪随机数介绍：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%EF%BC%9A\"><span class=\"toc-text\">1.伪随机数的运行机制：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%87%BD%E6%95%B0%EF%BC%9A-rand-srand\"><span class=\"toc-text\">2.C语言中的随机数函数：(rand,srand)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-rand%E5%87%BD%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">1.rand函数：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-srand%E5%87%BD%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">2.srand函数：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-%E5%85%B3%E4%BA%8E%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%EF%BC%9A\"><span class=\"toc-text\">2.关于随机数的攻击方式：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%83%85%E5%86%B5%E4%B8%80%EF%BC%9A%E6%A0%B9%E6%8D%AE%E7%AE%97%E6%B3%95%E6%8E%A8%E5%87%BA%E7%A7%8D%E5%AD%90\"><span class=\"toc-text\">情况一：根据算法推出种子</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%83%85%E5%86%B5%E4%BA%8C%EF%BC%9A%E6%A0%B9%E6%8D%AE%E7%94%9F%E6%88%90%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%8E%A8%E5%87%BA%E7%A7%8D%E5%AD%90\"><span class=\"toc-text\">情况二：根据生成的随机数推出种子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ATTACK1%EF%BC%9A\"><span class=\"toc-text\">ATTACK1：</span></a></li></ol></li></ol></li></ol>","author":{"name":"Big Devils","slug":"blog-author","avatar":"http://r9eglxl35.hn-bkt.clouddn.com//-77bc1d189fd53f98.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"mapped":true,"prev_post":{"title":"伪随机数逆向题实例","uid":"56919547bee931a87d7135086187449a","slug":"Reverse/伪随机数逆向题实例","date":"2022-03-25T07:15:01.000Z","updated":"2022-03-28T10:30:41.337Z","comments":true,"path":"api/articles/Reverse/伪随机数逆向题实例.json","keywords":null,"cover":"http://img.kofdevil.cn/boke/IMG_20210715_074631.jpg","text":"根据算法推出种子的逆向实例： 题目附件 random.rar 1.前期信息探查：1.EXEinfo：64位，无壳，ELF文件 2.运行一下： 1.IDA分析：__int64 __fastcall main(int a1, char **a2, char **a3) &#123; ...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"Reverse","slug":"Reverse","count":11,"path":"api/categories/Reverse.json"}],"tags":[{"name":"WP","slug":"WP","count":12,"path":"api/tags/WP.json"}],"author":{"name":"Big Devils","slug":"blog-author","avatar":"http://r9eglxl35.hn-bkt.clouddn.com//-77bc1d189fd53f98.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"feature":false},"next_post":{"title":"z3约束器在逆向中的应用","uid":"e2d2041f6fdd1685a23cfbc4b3d5e45d","slug":"Reverse/z3约束器在逆向中的应用","date":"2022-03-21T14:22:32.000Z","updated":"2022-03-28T10:30:41.337Z","comments":true,"path":"api/articles/Reverse/z3约束器在逆向中的应用.json","keywords":null,"cover":"http://img.kofdevil.cn/boke/794095.jpg","text":"ISCC 2018 My math is bad考点：rand，z3 1.基本信息探查：1.EXEinfo：64位，无壳，ELF文件 2.运行一下： 2.ida分析：查看主函数：__int64 __fastcall main(int a1, char **a2, char **a...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"Reverse","slug":"Reverse","count":11,"path":"api/categories/Reverse.json"}],"tags":[{"name":"WP","slug":"WP","count":12,"path":"api/tags/WP.json"},{"name":"python库","slug":"python库","count":2,"path":"api/tags/python库.json"}],"author":{"name":"Big Devils","slug":"blog-author","avatar":"http://r9eglxl35.hn-bkt.clouddn.com//-77bc1d189fd53f98.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"feature":false}}