{"title":"伪随机数的逆向中的应用","uid":"b987f7dbe9c05bec0f7dc95b74539bc9","slug":"Reverse/伪随机数的逆向中的应用","date":"2022-03-21T14:33:28.000Z","updated":"2022-03-21T14:47:20.916Z","comments":true,"path":"api/articles/Reverse/伪随机数的逆向中的应用.json","keywords":null,"cover":"https://gitee.com/gitgit1/cloudimage/raw/master/img/nullb93dc7ca5eee2.jpg","content":"<h1 id=\"1-伪随机数介绍：\"><a href=\"#1-伪随机数介绍：\" class=\"headerlink\" title=\"1.伪随机数介绍：\"></a>1.伪随机数介绍：</h1><h2 id=\"1-伪随机数的运行机制：\"><a href=\"#1-伪随机数的运行机制：\" class=\"headerlink\" title=\"1.伪随机数的运行机制：\"></a>1.伪随机数的运行机制：</h2><p>假设有<code>a1=f(seed)</code> ，<code>an+1=f(an)</code>，那么就可以得到一个序列<code>a1，a2，a3...an</code> 制作一个伪随机数也就是让其每次返回序列的下一个元素，如图：</p>\n<p><img src=\"https://gitee.com/gitgit1/cloudimage/raw/master/img/image-20220321224011130.png\" alt=\"image-20220321224011130\"></p>\n<p>对于<code>java.utiol.Random</code>，比较老的C语言的<code>rand()</code>库，和一部分php的<code>rand()</code>，它们使用的就是这种线性的随机数方法。这种方法一开始一般会取一个48bit的值作为seed直接放到state0里，而每个新的state的产生方式则为： <code>next_state=(state * multiplier + addend) mod (2 ^ precision)</code> （state为老的state，后面三个为固定的常量(<code>multiplier</code>&#x3D;25214903917,<code>addend</code> &#x3D; 11,<code>precision</code> &#x3D; 48)）。而从state计算到output的过程如下图：</p>\n<p><img src=\"https://gitee.com/gitgit1/cloudimage/raw/master/img/image-20220321224058310.png\" alt=\"image-20220321224058310\"></p>\n<p>output：为原数据右移16位之后的32比特的数据</p>\n<h2 id=\"2-C语言中的随机数函数：-rand-srand\"><a href=\"#2-C语言中的随机数函数：-rand-srand\" class=\"headerlink\" title=\"2.C语言中的随机数函数：(rand,srand)\"></a>2.C语言中的随机数函数：(rand,srand)</h2><p>rand和srand是用于产生伪随机数的两个函数，其返回值为[0,RAND_MAX]之间的数据</p>\n<h3 id=\"1-rand函数：\"><a href=\"#1-rand函数：\" class=\"headerlink\" title=\"1.rand函数：\"></a>1.rand函数：</h3><p>**rand()**函数是使用线性同余法做的，它并不是真的随机数，因为其周期特别长，所以在一定范围内可以看成随机的。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n头文件<span class=\"token operator\">:</span> stdlib<span class=\"token punctuation\">.</span>h\n用户未设定随机数种子时，系统默认的随机数种子为<span class=\"token number\">1</span>。\n<span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>产生的是伪随机数字，每次执行时是相同的<span class=\"token punctuation\">;</span>若要不同<span class=\"token punctuation\">,</span>用函数<span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>初始化它。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-srand函数：\"><a href=\"#2-srand函数：\" class=\"headerlink\" title=\"2.srand函数：\"></a>2.srand函数：</h3><p><strong>srand(</strong>)为初始化随机数发生器，用于<strong>设置rand()产生随机数时的种子</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> seed<span class=\"token punctuation\">)</span>\n头文件<span class=\"token operator\">:</span> stdlib<span class=\"token punctuation\">.</span>h\n功能：初始化随机数发生器\n<span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>用来设置<span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>产生随机数时的随机数种子。\n参数seed必须是个整数，如果每次seed都设相同值，<span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>所产生的随机数值每次就会一样。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>tips</p>\n<p>一般为了srand值相同导致的产生随机数值相同，随机数种子考虑使用时间(<code>srand(time(NULL))</code>)</p>\n</li>\n</ul>\n<h1 id=\"2-random函数的逆向实例：\"><a href=\"#2-random函数的逆向实例：\" class=\"headerlink\" title=\"2.random函数的逆向实例：\"></a>2.random函数的逆向实例：</h1><ul>\n<li><p>题目附件</p>\n<p><a href=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4c9fb729-00ef-4e02-ae4a-ef725e6f4c87/random.rar\">random.rar</a></p>\n</li>\n</ul>\n<h2 id=\"1-前期信息探查：\"><a href=\"#1-前期信息探查：\" class=\"headerlink\" title=\"1.前期信息探查：\"></a>1.前期信息探查：</h2><h3 id=\"1-EXEinfo：\"><a href=\"#1-EXEinfo：\" class=\"headerlink\" title=\"1.EXEinfo：\"></a>1.EXEinfo：</h3><p>64位，无壳，ELF文件</p>\n<p><img src=\"https://gitee.com/gitgit1/cloudimage/raw/master/img/image-20220321224323766.png\" alt=\"image-20220321224323766\"></p>\n<h3 id=\"2-运行一下：\"><a href=\"#2-运行一下：\" class=\"headerlink\" title=\"2.运行一下：\"></a>2.运行一下：</h3><p><img src=\"https://gitee.com/gitgit1/cloudimage/raw/master/img/image-20220321224343973.png\" alt=\"image-20220321224343973\"></p>\n<h2 id=\"1-IDA分析：\"><a href=\"#1-IDA分析：\" class=\"headerlink\" title=\"1.IDA分析：\"></a>1.IDA分析：</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">__int64 __fastcall <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>a2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>a3<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-24h]</span>\n  <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-20h]</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> seed<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+14h] [rbp-1Ch]</span>\n  <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-18h]</span>\n  <span class=\"token keyword\">int</span> v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+1Ch] [rbp-14h]</span>\n  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v9<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+20h] [rbp-10h]</span>\n  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v10<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+28h] [rbp-8h]</span>\n\n  v9 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x3E8uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  v10 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x3E8uLL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  seed <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to my reverse!!!\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Waiting\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">29</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    v7 <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>v7 <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 函数作用为清空缓冲区，这个参数的意思是键盘输入</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">__isoc99_scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> v9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">__isoc99_scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> v10<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Checking\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token number\">29</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    v8 <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>v8 <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fflush</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sub_4008C1</span><span class=\"token punctuation\">(</span>v9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sub_400901</span><span class=\"token punctuation\">(</span>v9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sub_4009B2</span><span class=\"token punctuation\">(</span>v9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sub_400A33</span><span class=\"token punctuation\">(</span>v9<span class=\"token punctuation\">,</span> v10<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">sub_400C23</span><span class=\"token punctuation\">(</span>v9<span class=\"token punctuation\">,</span> v10<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>主函数接收了两个值，一个username，一个password，分别被40~44行的五个函数作为参数，而剩下的两个循环没啥用，纯粹浪费分析时间。</p>\n<h3 id=\"1-第一个子函数分析\"><a href=\"#1-第一个子函数分析\" class=\"headerlink\" title=\"1.第一个子函数分析\"></a>1.第一个子函数分析</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">__int64 __fastcall <span class=\"token function\">sub_4008C1</span><span class=\"token punctuation\">(</span>__int64 username<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+1Ch] [rbp-4h]</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">sub_400866</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个子函数就一个循环，然后掉转到另一个子函数，循环的终止条件有两个，一个是i&gt;100,一个是username的地址加i个偏移等于’\\0’，所以i也就是username的串长。接着看sub_400866函数：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">__int64 __fastcall <span class=\"token function\">sub_400866</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  __int64 result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> a1 <span class=\"token operator\">||</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> a1 <span class=\"token operator\">>></span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">>></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_DWORD<span class=\"token punctuation\">)</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong username or password!!!\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这个函数作用大概是要求串长满足某种条件的，想知道哪些串长满足如下条件也很简单，就是穷举1~100，代入公式就行</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">for</span> i in <span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> i or <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> i <span class=\"token operator\">>></span> <span class=\"token number\">2</span> or <span class=\"token function\">not</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">>></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> or result<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">continue</span>\n    <span class=\"token keyword\">else</span> <span class=\"token operator\">:</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/gitgit1/cloudimage/raw/master/img/image-20220321224410730.png\" alt=\"image-20220321224410730\"></p>\n<p>可以看到满足条件的长度只有8和12</p>\n<p>第一个函数的作用到这就分析出来了，就是用来判断username串的串长</p>\n<h3 id=\"2-第二个函数分析：\"><a href=\"#2-第二个函数分析：\" class=\"headerlink\" title=\"2.第二个函数分析：\"></a>2.第二个函数分析：</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">__int64 __fastcall <span class=\"token function\">sub_400901</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>username<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  __int64 result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span>\n  __int64 v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-18h]</span>\n  __int64 v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+20h] [rbp-10h]</span>\n  __int64 v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+28h] [rbp-8h]</span>\n\n  v2 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>username<span class=\"token punctuation\">;</span>\n  v3 <span class=\"token operator\">=</span> username<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  v4 <span class=\"token operator\">=</span> username<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v2 <span class=\"token operator\">-</span> v3 <span class=\"token operator\">+</span> v4 <span class=\"token operator\">!=</span> <span class=\"token number\">1885764216</span> <span class=\"token operator\">||</span> v3 <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>v4 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0x22F241C1FLL</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">=</span> <span class=\"token number\">0x31CD156AC3A69DC4LL</span><span class=\"token punctuation\">,</span> v3 <span class=\"token operator\">*</span> v4 <span class=\"token operator\">!=</span> <span class=\"token number\">0x31CD156AC3A69DC4LL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong username or password!!!\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>result变量在这里啥用也没有，直接忽略。</p>\n<p>username被分成三段，分别放入v2、v3、v4，这三个值分别满足if里的三个等式，也就是要解一个三元一次方程组</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">from z3 import <span class=\"token operator\">*</span>\nx <span class=\"token operator\">=</span> <span class=\"token function\">Real</span><span class=\"token punctuation\">(</span><span class=\"token char\">'x'</span><span class=\"token punctuation\">)</span>     #v2\ny <span class=\"token operator\">=</span> <span class=\"token function\">Real</span><span class=\"token punctuation\">(</span><span class=\"token char\">'y'</span><span class=\"token punctuation\">)</span>     #v3\nz <span class=\"token operator\">=</span> <span class=\"token function\">Real</span><span class=\"token punctuation\">(</span><span class=\"token char\">'z'</span><span class=\"token punctuation\">)</span>     #v4\ns <span class=\"token operator\">=</span> <span class=\"token function\">Solver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> y <span class=\"token operator\">+</span> z <span class=\"token operator\">==</span> <span class=\"token number\">1885764216</span><span class=\"token punctuation\">)</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> z<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">9380830239</span><span class=\"token punctuation\">)</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">*</span> z <span class=\"token operator\">==</span> <span class=\"token number\">3588548026377346500</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> sat<span class=\"token operator\">:</span>\n    result <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">print</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token char\">'no result'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/gitgit1/cloudimage/raw/master/img/image-20220321224430494.png\" alt=\"image-20220321224430494\"></p>\n<p>将这些值转成十六进制：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">v2 <span class=\"token operator\">=</span> <span class=\"token number\">0x6D73</span> <span class=\"token number\">7469</span>\nv3 <span class=\"token operator\">=</span> <span class=\"token number\">0x6F72</span> <span class=\"token number\">6265</span>\nv4 <span class=\"token operator\">=</span> <span class=\"token number\">0x7265</span> <span class=\"token number\">6874</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>这里需要注意的是这些的值是以小端的形式存在内存中，重新组合转换成字符应为：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">v2 <span class=\"token operator\">=</span> <span class=\"token number\">0x6974736d</span>  <span class=\"token operator\">-></span>  itsm\nv3 <span class=\"token operator\">=</span> <span class=\"token number\">0x6562726f</span>  <span class=\"token operator\">-></span>  ebro\nv4 <span class=\"token operator\">=</span> <span class=\"token number\">0x74686572</span>  <span class=\"token operator\">-></span>  ther<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>由此得出username的值为“itsmebrother”</p>\n<h3 id=\"3-第三个函数分析：\"><a href=\"#3-第三个函数分析：\" class=\"headerlink\" title=\"3.第三个函数分析：\"></a>3.第三个函数分析：</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">__int64 __fastcall <span class=\"token function\">sub_4009B2</span><span class=\"token punctuation\">(</span>__int64 a1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  __int64 result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+1Ch] [rbp-4h]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    result <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>_BYTE<span class=\"token punctuation\">)</span>result <span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> a1<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">96</span> <span class=\"token operator\">||</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> a1<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> a1<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">95</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong username or password!!!\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>函数作用：判断输入的字符是否为小写字母和‘_’</p>\n<h3 id=\"4-第四个函数分析：\"><a href=\"#4-第四个函数分析：\" class=\"headerlink\" title=\"4.第四个函数分析：\"></a>4.第四个函数分析：</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">__int64 __fastcall <span class=\"token function\">sub_400A33</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span>username<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>password<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  __int64 result<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-28h]</span>\n  <span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+1Ch] [rbp-24h]</span>\n  <span class=\"token keyword\">int</span> v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+20h] [rbp-20h]</span>\n  <span class=\"token keyword\">int</span> v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+24h] [rbp-1Ch]</span>\n  <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+28h] [rbp-18h]</span>\n  <span class=\"token keyword\">int</span> v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+2Ch] [rbp-14h]</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> password<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span>               <span class=\"token comment\">// 判断password是否由，大小写字母和数字组成</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">96</span> <span class=\"token operator\">||</span> password<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">122</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">64</span> <span class=\"token operator\">||</span> password<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span>\n      <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">47</span> <span class=\"token operator\">||</span> password<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">57</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong username or password!!!\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token operator\">*</span>username <span class=\"token operator\">+</span> username<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  v4 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>password<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v4 <span class=\"token operator\">-</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">385125110</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong username or password!!!\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  v5 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>password <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v5 <span class=\"token operator\">-</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">537582108</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong username or password!!!\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  v6 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>password <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v6 <span class=\"token operator\">-</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">58160324</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong username or password!!!\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  v7 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>password <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v7 <span class=\"token operator\">-</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">1606651445</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong username or password!!!\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  v8 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>password <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v8 <span class=\"token operator\">-</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>_DWORD<span class=\"token punctuation\">)</span>result <span class=\"token operator\">!=</span> <span class=\"token number\">183286517</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong username or password!!!\\\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这里调用的是rand函数，paseword的值减去生成的随机数等于一个值，而srand设置的随机数种子是已知的利用这个特点我们就可以解出password的值。</p>\n<p>先利用已知的随机数种子求出生成的随机数：(操作系统不同rand函数的处理方式可能有差别)</p>\n<p>一开始是在Windows的环境下跑的结果解不出来：</p>\n<p><img src=\"https://gitee.com/gitgit1/cloudimage/raw/master/img/image-20220321224451965.png\" alt=\"image-20220321224451965\"></p>\n<p>这是个linux程序还是使用linux的gcc：</p>\n<p><img src=\"https://gitee.com/gitgit1/cloudimage/raw/master/img/image-20220321224518165.png\" alt=\"image-20220321224518165\"></p>\n<p>生成可执行文件会报错，说做加法的时候出现溢出情况，不过不影响，因为源程序也会溢出。</p>\n<p><img src=\"https://gitee.com/gitgit1/cloudimage/raw/master/img/image-20220321224535127.png\" alt=\"image-20220321224535127\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">0x5664ad74</span>\n<span class=\"token number\">0x283e9d1a</span>\n<span class=\"token number\">0x6ee9f96c</span>\n<span class=\"token number\">0x36fc1ff</span>\n<span class=\"token number\">0x665b8a42</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编写exp来获取password的值：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">rpassword <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nrpassword<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0x16F48AF6</span><span class=\"token punctuation\">)</span>\nrpassword<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0x200ADA1C</span><span class=\"token punctuation\">)</span>\nrpassword<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0x37774C4</span><span class=\"token punctuation\">)</span>\nrpassword<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0x5FC38E35</span><span class=\"token punctuation\">)</span>\nrpassword<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0xAECBAF5</span><span class=\"token punctuation\">)</span>\nrand <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nrand<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0x5664ad74</span><span class=\"token punctuation\">)</span>\nrand<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0x283e9d1a</span><span class=\"token punctuation\">)</span>\nrand<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0x6ee9f96c</span><span class=\"token punctuation\">)</span>\nrand<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0x36fc1ff</span><span class=\"token punctuation\">)</span>\nrand<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token number\">0x665b8a42</span><span class=\"token punctuation\">)</span>\npassword <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>rpassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    password<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>rpassword<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> rand<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/gitgit1/cloudimage/raw/master/img/image-20220321224558954.png\" alt=\"image-20220321224558954\"></p>\n<p>但这里还是要注意处理小端数的问题</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> binascii\n\npassword <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"6d59386a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"48497736\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"72616e30\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"63335034\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"71484537\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">big_small_end_convert</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> binascii<span class=\"token punctuation\">.</span>hexlify<span class=\"token punctuation\">(</span>binascii<span class=\"token punctuation\">.</span>unhexlify<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\ndi <span class=\"token operator\">=</span> <span class=\"token string\">b'6d59386a'</span>\ndo <span class=\"token operator\">=</span> big_small_end_convert<span class=\"token punctuation\">(</span>di<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>do<span class=\"token punctuation\">)</span>\ndi <span class=\"token operator\">=</span> <span class=\"token string\">b'48497736'</span>\ndo <span class=\"token operator\">=</span> big_small_end_convert<span class=\"token punctuation\">(</span>di<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>do<span class=\"token punctuation\">)</span>\ndi <span class=\"token operator\">=</span> <span class=\"token string\">b'72616e30'</span>\ndo <span class=\"token operator\">=</span> big_small_end_convert<span class=\"token punctuation\">(</span>di<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>do<span class=\"token punctuation\">)</span>\ndi <span class=\"token operator\">=</span> <span class=\"token string\">b'63335034'</span>\ndo <span class=\"token operator\">=</span> big_small_end_convert<span class=\"token punctuation\">(</span>di<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>do<span class=\"token punctuation\">)</span>\ndi <span class=\"token operator\">=</span> <span class=\"token string\">b'71484537'</span>\ndo <span class=\"token operator\">=</span> big_small_end_convert<span class=\"token punctuation\">(</span>di<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>do<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>输出得到正常password串（这个代码有点笨，以后还得改一改）</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token number\">6</span>a38596d36774948306e61723450336337454871<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将获得的password转成字符</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">i <span class=\"token operator\">=</span> <span class=\"token string\">\"6a38596d36774948306e61723450336337454871\"</span>\n<span class=\"token keyword\">for</span> q <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    flag <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">:</span>q<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#j8Ym6wIH0nar4P3c7EHq</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>至此用户名和密码就都搞到手了</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">username<span class=\"token punctuation\">:</span>itsmebrother\npassword<span class=\"token punctuation\">:</span>j8Ym6wIH0nar4P3c7EHq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-第五个函数分析：\"><a href=\"#5-第五个函数分析：\" class=\"headerlink\" title=\"5.第五个函数分析：\"></a>5.第五个函数分析：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token builtin\">int</span> __fastcall sub_400C23<span class=\"token punctuation\">(</span>__int64 username<span class=\"token punctuation\">,</span> __int64 password<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token builtin\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">//</span> <span class=\"token punctuation\">[</span>rsp<span class=\"token operator\">+</span>1Ch<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>rbp<span class=\"token operator\">-</span>4h<span class=\"token punctuation\">]</span>\n\n  printf<span class=\"token punctuation\">(</span><span class=\"token string\">\"flag is:flag&#123;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">19</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">+</span><span class=\"token operator\">+</span>i <span class=\"token punctuation\">)</span>\n    putchar<span class=\"token punctuation\">(</span>byte_602090<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> puts<span class=\"token punctuation\">(</span><span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>flag的值为password异或<code>byte_602090</code> 里的值，将<code>byte_602090</code> 里的值提取出来就可以写exp了。</p>\n<p>EXP为：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">rflag <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0x06</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x57</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x3E</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0A</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x53</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x13</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x16</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x21</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x5E</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x31</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0C</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x0B</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x6B</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x22</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x56</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x15</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x52</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x37</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x3B</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x14</span><span class=\"token punctuation\">]</span>\npassword <span class=\"token operator\">=</span> <span class=\"token string\">\"j8Ym6wIH0nar4P3c7EHq\"</span>\nflag <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>rflag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    flag<span class=\"token operator\">+=</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> rflag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://gitee.com/gitgit1/cloudimage/raw/master/img/image-20220321224628750.png\" alt=\"image-20220321224628750\"></p>\n<p>flag{logged_in_my_reverse}</p>\n<p><img src=\"https://gitee.com/gitgit1/cloudimage/raw/master/img/image-20220321224646515.png\" alt=\"image-20220321224646515\"></p>\n<p>未完</p>\n","feature":false,"text":"1.伪随机数介绍：1.伪随机数的运行机制：假设有a1=f(seed) ，an+1=f(an)，那么就可以得到一个序列a1，a2，a3...an 制作一个伪随机数也就是让其每次返回序列的下一个元素，如图： 对于java.utiol.Random，比较老的C语言的rand()库，和一...","link":"","photos":[],"count_time":{"symbolsCount":"8.2k","symbolsTime":"7 mins."},"categories":[{"name":"Reverse","slug":"Reverse","count":10,"path":"api/categories/Reverse.json"}],"tags":[{"name":"C","slug":"C","count":1,"path":"api/tags/C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E4%BB%8B%E7%BB%8D%EF%BC%9A\"><span class=\"toc-text\">1.伪随机数介绍：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%EF%BC%9A\"><span class=\"toc-text\">1.伪随机数的运行机制：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-C%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%87%BD%E6%95%B0%EF%BC%9A-rand-srand\"><span class=\"toc-text\">2.C语言中的随机数函数：(rand,srand)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-rand%E5%87%BD%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">1.rand函数：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-srand%E5%87%BD%E6%95%B0%EF%BC%9A\"><span class=\"toc-text\">2.srand函数：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-random%E5%87%BD%E6%95%B0%E7%9A%84%E9%80%86%E5%90%91%E5%AE%9E%E4%BE%8B%EF%BC%9A\"><span class=\"toc-text\">2.random函数的逆向实例：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%89%8D%E6%9C%9F%E4%BF%A1%E6%81%AF%E6%8E%A2%E6%9F%A5%EF%BC%9A\"><span class=\"toc-text\">1.前期信息探查：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-EXEinfo%EF%BC%9A\"><span class=\"toc-text\">1.EXEinfo：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%8B%EF%BC%9A\"><span class=\"toc-text\">2.运行一下：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-IDA%E5%88%86%E6%9E%90%EF%BC%9A\"><span class=\"toc-text\">1.IDA分析：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AD%90%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90\"><span class=\"toc-text\">1.第一个子函数分析</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90%EF%BC%9A\"><span class=\"toc-text\">2.第二个函数分析：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90%EF%BC%9A\"><span class=\"toc-text\">3.第三个函数分析：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E7%AC%AC%E5%9B%9B%E4%B8%AA%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90%EF%BC%9A\"><span class=\"toc-text\">4.第四个函数分析：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E7%AC%AC%E4%BA%94%E4%B8%AA%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90%EF%BC%9A\"><span class=\"toc-text\">5.第五个函数分析：</span></a></li></ol></li></ol></li></ol>","author":{"name":"Big Devils","slug":"blog-author","avatar":"https://gitee.com/gitgit1/cloudimage/raw/master/img/-77bc1d189fd53f98.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"mapped":true,"prev_post":{"title":"2022年2月SUSCTF比赛记录","uid":"9c74912da0a2a9c3bea7b6b4717c1a49","slug":"比赛记录/2022年2月SUSCTF比赛记录","date":"2022-03-14T13:33:40.000Z","updated":"2022-03-22T11:14:17.821Z","comments":true,"path":"api/articles/比赛记录/2022年2月SUSCTF比赛记录.json","keywords":null,"cover":"https://gitee.com/gitgit1/cloudimage/raw/master/img/IMG_20220322_185517.jpg","text":" Reverse 考点 DigitalCircuits exe→py，tea DigitalCircuitsexe→py: 只要一看到这个图标就晓得大概率是py文件被打包成了exe，而且一般打包后的文件较大。直接用脚本解包。 pyinstxtractor.py DigitalCi...","link":"","photos":[],"count_time":{"symbolsCount":"5.2k","symbolsTime":"5 mins."},"categories":[{"name":"比赛记录","slug":"比赛记录","count":2,"path":"api/categories/比赛记录.json"}],"tags":[{"name":"WP","slug":"WP","count":11,"path":"api/tags/WP.json"}],"author":{"name":"Big Devils","slug":"blog-author","avatar":"https://gitee.com/gitgit1/cloudimage/raw/master/img/-77bc1d189fd53f98.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"feature":true},"next_post":{"title":"z3约束器在逆向中的应用","uid":"e2d2041f6fdd1685a23cfbc4b3d5e45d","slug":"Reverse/z3约束器在逆向中的应用","date":"2022-03-21T14:22:32.000Z","updated":"2022-03-21T14:49:32.670Z","comments":true,"path":"api/articles/Reverse/z3约束器在逆向中的应用.json","keywords":null,"cover":"https://gitee.com/gitgit1/cloudimage/raw/master/img/1145542.jpg","text":"ISCC 2018 My math is bad考点：rand，z3 1.基本信息探查：1.EXEinfo：64位，无壳，ELF文件 2.运行一下： 2.ida分析：查看主函数：__int64 __fastcall main(int a1, char **a2, char **a...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"Reverse","slug":"Reverse","count":10,"path":"api/categories/Reverse.json"}],"tags":[{"name":"WP","slug":"WP","count":11,"path":"api/tags/WP.json"},{"name":"python库","slug":"python库","count":2,"path":"api/tags/python库.json"}],"author":{"name":"Big Devils","slug":"blog-author","avatar":"https://gitee.com/gitgit1/cloudimage/raw/master/img/-77bc1d189fd53f98.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"feature":false}}