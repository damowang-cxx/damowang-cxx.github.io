{"title":"XTEA逆向题实例","uid":"f1880da365bc82a97f263e42062ae6ee","slug":"Reverse/XTEA逆向题实例","date":"2022-03-19T17:44:25.000Z","updated":"2022-03-28T08:35:15.792Z","comments":true,"path":"api/articles/Reverse/XTEA逆向题实例.json","keywords":null,"cover":"http://r9eglxl35.hn-bkt.clouddn.com//wallhaven-g8j113.jpg","content":"<h1 id=\"GoEncryp\"><a href=\"#GoEncryp\" class=\"headerlink\" title=\"GoEncryp\"></a>GoEncryp</h1><p>2021虎符杯的re</p>\n<h2 id=\"1-基本信息探查：\"><a href=\"#1-基本信息探查：\" class=\"headerlink\" title=\"1.基本信息探查：\"></a>1.基本信息探查：</h2><h3 id=\"1-EXEinfo：\"><a href=\"#1-EXEinfo：\" class=\"headerlink\" title=\"1.EXEinfo：\"></a>1.EXEinfo：</h3><p>64位，无壳</p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320014706516.png\" alt=\"image-20220320014706516\"></p>\n<h3 id=\"2-运行一下：\"><a href=\"#2-运行一下：\" class=\"headerlink\" title=\"2.运行一下：\"></a>2.运行一下：</h3><p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320014716881.png\" alt=\"image-20220320014716881\"></p>\n<h2 id=\"2-IDA分析：\"><a href=\"#2-IDA分析：\" class=\"headerlink\" title=\"2.IDA分析：\"></a>2.IDA分析：</h2><h3 id=\"1-找思路：\"><a href=\"#1-找思路：\" class=\"headerlink\" title=\"1.找思路：\"></a>1.找思路：</h3><p>搜索主函数看到main_main：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> __cdecl <span class=\"token function\">main_main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// edi</span>\n  __int64 v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rsi</span>\n  __int64 v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r8</span>\n  __int64 v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r9</span>\n  __int64 v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r8</span>\n  __int64 v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r9</span>\n  <span class=\"token keyword\">int</span> v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// edx</span>\n  __int64 v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r8</span>\n  __int64 v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r9</span>\n  __int64 v9<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r8</span>\n  __int64 v10<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r9</span>\n  <span class=\"token keyword\">int</span> v11<span class=\"token punctuation\">;</span> <span class=\"token comment\">// edx</span>\n  <span class=\"token keyword\">int</span> v12<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ecx</span>\n  __int64 v13<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r8</span>\n  __int64 v14<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r9</span>\n  <span class=\"token keyword\">unsigned</span> __int64 v15<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rbx</span>\n  <span class=\"token keyword\">int</span> v16<span class=\"token punctuation\">;</span> <span class=\"token comment\">// er8</span>\n  __int64 v17<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r9</span>\n  <span class=\"token keyword\">int</span> v18<span class=\"token punctuation\">;</span> <span class=\"token comment\">// er8</span>\n  __int64 v19<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r9</span>\n  <span class=\"token keyword\">int</span> v20<span class=\"token punctuation\">;</span> <span class=\"token comment\">// esi</span>\n  <span class=\"token keyword\">int</span> v21<span class=\"token punctuation\">;</span> <span class=\"token comment\">// edx</span>\n  <span class=\"token keyword\">int</span> v22<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ecx</span>\n  <span class=\"token keyword\">int</span> v23<span class=\"token punctuation\">;</span> <span class=\"token comment\">// er8</span>\n  __int64 v24<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r9</span>\n  <span class=\"token keyword\">int</span> v25<span class=\"token punctuation\">;</span> <span class=\"token comment\">// edx</span>\n  __int64 v26<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r8</span>\n  __int64 v27<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r9</span>\n  __int64 <span class=\"token operator\">*</span>v28<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-E0h]</span>\n  __int128 v29<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-E0h]</span>\n  _OWORD <span class=\"token operator\">*</span>v30<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-E0h]</span>\n  __int64 v31<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+8h] [rbp-E0h]</span>\n  __int64 v32<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-D8h]</span>\n  __int64 v33<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-D0h]</span>\n  __int64 v34<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+20h] [rbp-C8h]</span>\n  __int64 v35<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+50h] [rbp-98h]</span>\n  __int64 v36<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+58h] [rbp-90h]</span>\n  __int128 v37<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+60h] [rbp-88h] BYREF</span>\n  __int64 v38<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+70h] [rbp-78h]</span>\n  __int64 v39<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+78h] [rbp-70h]</span>\n  __int64 v40<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+80h] [rbp-68h] BYREF</span>\n  __int64 <span class=\"token operator\">*</span>v41<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+88h] [rbp-60h]</span>\n  __int128 v42<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+90h] [rbp-58h] BYREF</span>\n  __int128 v43<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+A0h] [rbp-48h] BYREF</span>\n  __int128 v44<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+B0h] [rbp-38h] BYREF</span>\n  __int128 v45<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+C0h] [rbp-28h] BYREF</span>\n  __int128 v46<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+D0h] [rbp-18h] BYREF</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v40 <span class=\"token operator\">&lt;=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">NtCurrentTeb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>NtTib<span class=\"token punctuation\">.</span>ArbitraryUserPointer <span class=\"token operator\">+</span> <span class=\"token number\">16LL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">runtime_morestack_noctxt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">runtime_newobject</span><span class=\"token punctuation\">(</span>v0<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  v41 <span class=\"token operator\">=</span> v28<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v46 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>unk_4D4F40<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v46 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>main_statictmp_0<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fmt_Fprintln</span><span class=\"token punctuation\">(</span>\n    v0<span class=\"token punctuation\">,</span>\n    v1<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v46<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unk_4D4F40<span class=\"token punctuation\">,</span>\n    v2<span class=\"token punctuation\">,</span>\n    v3<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>go_itab__os_File_io_Writer<span class=\"token punctuation\">,</span>\n    os_Stdout<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v46<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v45 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>unk_4D1A80<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v45 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v41<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fmt_Fscanf</span><span class=\"token punctuation\">(</span>\n    v0<span class=\"token punctuation\">,</span>\n    v1<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>go_itab__os_File_io_Reader<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v45<span class=\"token punctuation\">,</span>\n    v4<span class=\"token punctuation\">,</span>\n    v5<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>go_itab__os_File_io_Reader<span class=\"token punctuation\">,</span>\n    os_Stdin<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unk_4FAFCC<span class=\"token punctuation\">,</span>\n    <span class=\"token number\">2LL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v45<span class=\"token punctuation\">,</span>\n    <span class=\"token number\">1LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v29 <span class=\"token operator\">=</span> v41<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">main_check</span><span class=\"token punctuation\">(</span>v0<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v6<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>v41<span class=\"token punctuation\">,</span> v7<span class=\"token punctuation\">,</span> v8<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>v41<span class=\"token punctuation\">,</span> v29<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v32 <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    v36 <span class=\"token operator\">=</span> v34<span class=\"token punctuation\">;</span>\n    v35 <span class=\"token operator\">=</span> v33<span class=\"token punctuation\">;</span>\n    v38 <span class=\"token operator\">=</span> v32<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">runtime_newobject</span><span class=\"token punctuation\">(</span>v0<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>v30 <span class=\"token operator\">=</span> main_statictmp_4<span class=\"token punctuation\">;</span>\n    v37 <span class=\"token operator\">=</span> main_statictmp_5<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">main_NewCipher</span><span class=\"token punctuation\">(</span>v0<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v11<span class=\"token punctuation\">,</span> v12<span class=\"token punctuation\">,</span> v13<span class=\"token punctuation\">,</span> v14<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>v30<span class=\"token punctuation\">,</span> <span class=\"token number\">16LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v39 <span class=\"token operator\">=</span> v33<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">runtime_newobject</span><span class=\"token punctuation\">(</span>v0<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v40 <span class=\"token operator\">=</span> v31<span class=\"token punctuation\">;</span>\n    v15 <span class=\"token operator\">=</span> v33<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">main___myCipher__Encrypt</span><span class=\"token punctuation\">(</span>v0<span class=\"token punctuation\">,</span> v34<span class=\"token punctuation\">,</span> v38<span class=\"token punctuation\">,</span> v39<span class=\"token punctuation\">,</span> v16<span class=\"token punctuation\">,</span> v17<span class=\"token punctuation\">,</span> v39<span class=\"token punctuation\">,</span> v31<span class=\"token punctuation\">,</span> <span class=\"token number\">16LL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16LL</span><span class=\"token punctuation\">,</span> v38<span class=\"token punctuation\">,</span> v33<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v15 <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">)</span>\n      <span class=\"token function\">runtime_panicslice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v20 <span class=\"token operator\">=</span> v38<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">main___myCipher__Encrypt</span><span class=\"token punctuation\">(</span>\n      v0<span class=\"token punctuation\">,</span>\n      v38<span class=\"token punctuation\">,</span>\n      v38 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">-</span> v36<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      v40<span class=\"token punctuation\">,</span>\n      v18<span class=\"token punctuation\">,</span>\n      v19<span class=\"token punctuation\">,</span>\n      v39<span class=\"token punctuation\">,</span>\n      v40 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">8LL</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">8LL</span><span class=\"token punctuation\">,</span>\n      v38 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">-</span> v36<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">63</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      v35 <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">internal_bytealg_Equal</span><span class=\"token punctuation\">(</span>v0<span class=\"token punctuation\">,</span> v38<span class=\"token punctuation\">,</span> v21<span class=\"token punctuation\">,</span> v22<span class=\"token punctuation\">,</span> v23<span class=\"token punctuation\">,</span> v24<span class=\"token punctuation\">,</span> v40<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16LL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v37<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>_BYTE<span class=\"token punctuation\">)</span>v36 <span class=\"token operator\">==</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v43 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>unk_4D4F40<span class=\"token punctuation\">;</span>\n      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v43 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>main_statictmp_2<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">fmt_Fprintln</span><span class=\"token punctuation\">(</span>\n        v0<span class=\"token punctuation\">,</span>\n        v20<span class=\"token punctuation\">,</span>\n        v25<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>go_itab__os_File_io_Writer<span class=\"token punctuation\">,</span>\n        v26<span class=\"token punctuation\">,</span>\n        v27<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>go_itab__os_File_io_Writer<span class=\"token punctuation\">,</span>\n        os_Stdout<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v43<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v42 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>unk_4D4F40<span class=\"token punctuation\">;</span>\n      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v42 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>main_statictmp_3<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">fmt_Fprintln</span><span class=\"token punctuation\">(</span>\n        v0<span class=\"token punctuation\">,</span>\n        v20<span class=\"token punctuation\">,</span>\n        v25<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>go_itab__os_File_io_Writer<span class=\"token punctuation\">,</span>\n        v26<span class=\"token punctuation\">,</span>\n        v27<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>go_itab__os_File_io_Writer<span class=\"token punctuation\">,</span>\n        os_Stdout<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v42<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">else</span>\n  <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v44 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>unk_4D4F40<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v44 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>main_statictmp_1<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fmt_Fprintln</span><span class=\"token punctuation\">(</span>\n      v0<span class=\"token punctuation\">,</span>\n      v1<span class=\"token punctuation\">,</span>\n      <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>go_itab__os_File_io_Writer<span class=\"token punctuation\">,</span>\n      v9<span class=\"token punctuation\">,</span>\n      v10<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>go_itab__os_File_io_Writer<span class=\"token punctuation\">,</span>\n      os_Stdout<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>v44<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>做这个题的时候确实很蒙，一开始想着F12看一下字符串(因为前面运行的时候有看到有个input flag)，但是啥也没找到，索性就直接搜一下这些函数，抓着第一个函数搜了一下，发现这是GO语言的函数，之前确实没接触过这个语言的题，这里采用的办法是直接动调，选择在fmt_Fprintln函数和fmt_Fscanf的地方都下一个断点(没有为什么看一下输出和输入找找思路)</p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320014753550.png\" alt=\"image-20220320014753550\"></p>\n<p>可以发现动调到call fmt_Fprintln 就弹出了input flag，然后下面的scanf就是接收flag，这里随便乱输入一些东西<img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320014830173.png\" alt=\"image-20220320014830173\"></p>\n<p>这里F8步过</p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320014849343.png\" alt=\"image-20220320014849343\"></p>\n<p>这里就是根据check函数会有个分支，左边为正确，右边为错误<img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320014910496.png\" alt=\"image-20220320014910496\"></p>\n<p>这里退出来先分析main_check函数。</p>\n<h3 id=\"2-main-check函数分析：\"><a href=\"#2-main-check函数分析：\" class=\"headerlink\" title=\"2.main_check函数分析：\"></a>2.main_check函数分析：</h3><p>搜一下这些函数，可以发现有个正则表达式的函数：<code>regexp_MustCompile</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">regexp_MustCompile</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">,</span> a3<span class=\"token punctuation\">,</span> v8<span class=\"token punctuation\">,</span> a5<span class=\"token punctuation\">,</span> a6<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unk_5041E5<span class=\"token punctuation\">,</span> <span class=\"token number\">78LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这里调用了一个函数，跟过去看看</p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320014935675.png\" alt=\"image-20220320014935675\"></p>\n<p>这里按a注转一下：</p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320014956677.png\" alt=\"image-20220320014956677\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">flag<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span>9a<span class=\"token operator\">-</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span>9a<span class=\"token operator\">-</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span>9a<span class=\"token operator\">-</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span>9a<span class=\"token operator\">-</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span>9a<span class=\"token operator\">-</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">12</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\"># flag&#123;12345678-1234-1234-1234-12345678abcd&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意这里有个正则表达式，这里基本可以确定check函数是判断输入的字符是否符合这个表达式。然后我们继续动调，sacnf时输入符合正则表达时的flag</p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320015017344.png\" alt=\"image-20220320015017344\"></p>\n<p>这里就会跳转到左边的函数了，这次动调遇到跳转选择直接改ZF看一下哪些函数引发跳转</p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320015044952.png\" alt=\"image-20220320015044952\"></p>\n<p>可以发现最后引发跳转在上图函数,先分析main___myCipher__Encrypt函数,这里面的核心代码为：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> v16 <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  v13 <span class=\"token operator\">=</span> v14<span class=\"token punctuation\">;</span>\n  v18 <span class=\"token operator\">=</span> v14 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v14 <span class=\"token operator\">>></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token operator\">*</span> v14<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  v19 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a7 <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  v20 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a7 <span class=\"token operator\">+</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  v21 <span class=\"token operator\">=</span> v17<span class=\"token punctuation\">;</span>\n  v22 <span class=\"token operator\">=</span> v17 <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v22 <span class=\"token operator\">>=</span> v19 <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">runtime_panicindex</span><span class=\"token punctuation\">(</span>v19<span class=\"token punctuation\">,</span> v22<span class=\"token punctuation\">,</span> v15<span class=\"token punctuation\">,</span> a7<span class=\"token punctuation\">,</span> v13<span class=\"token punctuation\">,</span> v20<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  v23 <span class=\"token operator\">=</span> v15 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>v18 <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>v21 <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v20 <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> v22<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  v17 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v21 <span class=\"token operator\">+</span> <span class=\"token number\">305419896</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  v24 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>v17 <span class=\"token operator\">>></span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v24 <span class=\"token operator\">>=</span> v19 <span class=\"token punctuation\">)</span>\n    <span class=\"token function\">runtime_panicindex</span><span class=\"token punctuation\">(</span>v19<span class=\"token punctuation\">,</span> v17<span class=\"token punctuation\">,</span> v24<span class=\"token punctuation\">,</span> a7<span class=\"token punctuation\">,</span> v13<span class=\"token punctuation\">,</span> v20<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">++</span>v16<span class=\"token punctuation\">;</span>\n  a1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v23 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v23 <span class=\"token operator\">>></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token operator\">*</span> v23<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>v21 <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v20 <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> v24<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">305419896</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  v14 <span class=\"token operator\">=</span> v13 <span class=\"token operator\">+</span> a1<span class=\"token punctuation\">;</span>\n  v15 <span class=\"token operator\">=</span> v23<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分析代码类似XXTEA，因为可以看到核心加密在第8行，但可能是ida的问题。加密算法有点奇怪</p>\n<ul>\n<li><p>11行处的异或和正常思路一样只是有些步骤用变量代替，在做异或操作之前先赋好值，后面直接用</p>\n<ul>\n<li>如<code>v19 = v15 + ((v15 &gt;&gt; 5) ^ (16 * v15))</code></li>\n</ul>\n</li>\n<li><p>17行处的异或a1相当于之前笔记的v1，我们大致将这个加密分为两块(异或的左右)</p>\n<ul>\n<li><p><code>(v23 + ((v23 &gt;&gt; 5) ^ (16 * v23)))</code>和<code>(sum + *(_DWORD *)(key + 4 * v24) + 305419896)</code></p>\n</li>\n<li><p>左边倒是中规中矩，<code>v23 * 16</code> 就相当于<code>v23&lt;&lt;4</code> ,v23也就是笔记里的v0变量</p>\n</li>\n<li><p>右边就奇怪了，正常情况下代码为：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">(sum + key[(sum&gt;&gt;11) &amp; 3])<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li>一开始还奇怪sum为什么还要在后面加一个0x12345678</li>\n<li>但往上面发现正常情况下做完v0的加密后sum并没有进行累加，v0也用的不是sum进行加密而是用的v17,每个循环sum自己虽然没有累加delta值但是每次最开始都被v17赋值了，而v17在做完v0的加密后负责累加</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>到这里可以判断出这就是正常的XTEA加密，Delta的值为0x12345678，目前缺少的值为KEY和加密之后的数据。这里还是继续动调。</p>\n<ul>\n<li><p>变量调整后的函数</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> v17 <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">&#123;</span>\n    v14 <span class=\"token operator\">=</span> v15<span class=\"token punctuation\">;</span>\n    v19 <span class=\"token operator\">=</span> v15 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v15 <span class=\"token operator\">>></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token operator\">*</span> v15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v20 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a7 <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    KEY <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a7 <span class=\"token operator\">+</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sum <span class=\"token operator\">=</span> sum_leijia<span class=\"token punctuation\">;</span>\n    v23 <span class=\"token operator\">=</span> sum_leijia <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v23 <span class=\"token operator\">>=</span> v20 <span class=\"token punctuation\">)</span>\n      <span class=\"token function\">runtime_panicindex</span><span class=\"token punctuation\">(</span>v20<span class=\"token punctuation\">,</span> v23<span class=\"token punctuation\">,</span> v16<span class=\"token punctuation\">,</span> a7<span class=\"token punctuation\">,</span> v14<span class=\"token punctuation\">,</span> KEY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v0 <span class=\"token operator\">=</span> v16 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>v19 <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>KEY <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> v23<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sum_leijia <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v25 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>sum_leijia <span class=\"token operator\">>></span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v25 <span class=\"token operator\">>=</span> v20 <span class=\"token punctuation\">)</span>\n      <span class=\"token function\">runtime_panicindex</span><span class=\"token punctuation\">(</span>v20<span class=\"token punctuation\">,</span> sum_leijia<span class=\"token punctuation\">,</span> v25<span class=\"token punctuation\">,</span> a7<span class=\"token punctuation\">,</span> v14<span class=\"token punctuation\">,</span> KEY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>v17<span class=\"token punctuation\">;</span>\n    v1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v0 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v0 <span class=\"token operator\">>></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token number\">16</span> <span class=\"token operator\">*</span> v0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_DWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>KEY <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> v25<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    v15 <span class=\"token operator\">=</span> v14 <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">;</span>\n    v16 <span class=\"token operator\">=</span> v0<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<h3 id=\"3-寻找KEY值：\"><a href=\"#3-寻找KEY值：\" class=\"headerlink\" title=\"3.寻找KEY值：\"></a>3.寻找KEY值：</h3><p>之前对加密函数分析知道，key的赋值在第50行：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">KEY <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a7 <span class=\"token operator\">+</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这里在第51行下一个断点(这里重新调试了一下，做到后面忘记截图了，但重新反汇编的行数有不同)</p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320015127769.png\" alt=\"image-20220320015127769\"></p>\n<p>F9运行</p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320015153280.png\" alt=\"image-20220320015153280\"></p>\n<p>这里双击v20变量</p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320015213194.png\" alt=\"image-20220320015213194\"></p>\n<p>这里转成double word(一个密钥32字节)，得出key值：</p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320015234160.png\" alt=\"image-20220320015234160\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">key<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x10203</span>h<span class=\"token punctuation\">,</span><span class=\"token number\">0x4050607</span>h<span class=\"token punctuation\">,</span><span class=\"token number\">0x8090A0B</span>h<span class=\"token punctuation\">,</span><span class=\"token number\">0x0C0D0E0F</span>h<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"4-获取加密后的数据：\"><a href=\"#4-获取加密后的数据：\" class=\"headerlink\" title=\"4.获取加密后的数据：\"></a>4.获取加密后的数据：</h3><p>直接在比较函数这里下断点：</p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320015315697.png\" alt=\"image-20220320015315697\"></p>\n<p>跟进去先看一下流程图：(这样可以确认是通过那个比较进行跳转的)</p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320015333405.png\" alt=\"image-20220320015333405\"></p>\n<p>直接在这个跳转地址下断点，我们要提取的值就在上面，但问题来了，不晓得要提取的是哪一个，这里的解决方案是调两次每次输入的flag不想同看哪个寄存器的值变了。</p>\n<p>当flag为：<code>flag&#123;12345678-1234-1234-1234-12345678abcd&#125;</code></p>\n<p>双击分别查看rsi和，rdi的值：</p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320015410898.png\" alt=\"image-20220320015410898\"></p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320015439861.png\" alt=\"image-20220320015439861\"></p>\n<p>当flag为：<code>flag&#123;11111111-1111-1111-1111-111111111111&#125;</code></p>\n<p>双击分别查看rsi和，rdi的值：</p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320015520112.png\" alt=\"image-20220320015520112\"></p>\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320015529466.png\" alt=\"image-20220320015529466\"></p>\n<p>这样一比对就可以发现加密后的数据存在了rdi内。</p>\n<p>进入rdi的数据两次R，换成十六进制，然后提取数据。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">0EC311F045C79AF3EDF5D910542702CB<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"3-EXP：\"><a href=\"#3-EXP：\" class=\"headerlink\" title=\"3.EXP：\"></a>3.EXP：</h2><p>这里的exp直接在网上找的：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdint.h></span></span>\n<span class=\"token comment\">/* take 64 bits of data in v[0] and v[1] and 128 bits of key[0] - key[3] */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">encipher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> num_rounds<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token keyword\">const</span> key<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">uint32_t</span> v0<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v1<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> delta<span class=\"token operator\">=</span><span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num_rounds<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        v0 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>v1 <span class=\"token operator\">>></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+</span> key<span class=\"token punctuation\">[</span>sum <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sum <span class=\"token operator\">+=</span> delta<span class=\"token punctuation\">;</span>\n        v1 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v0 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>v0 <span class=\"token operator\">>></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v0<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+</span> key<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">>></span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v0<span class=\"token punctuation\">;</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">void</span> <span class=\"token function\">decipher</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> num_rounds<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> <span class=\"token keyword\">const</span> key<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">uint32_t</span> v0<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v1<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> delta<span class=\"token operator\">=</span><span class=\"token number\">0x12345678</span><span class=\"token punctuation\">,</span> sum<span class=\"token operator\">=</span>delta<span class=\"token operator\">*</span>num_rounds<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num_rounds<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        v1 <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v0 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>v0 <span class=\"token operator\">>></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v0<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+</span> key<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">>></span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sum <span class=\"token operator\">-=</span> delta<span class=\"token punctuation\">;</span>\n        v0 <span class=\"token operator\">-=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v1 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>v1 <span class=\"token operator\">>></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v1<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+</span> key<span class=\"token punctuation\">[</span>sum <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v0<span class=\"token punctuation\">;</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>v1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">uint32_t</span> v_part1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x0EC311F0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x45C79AF3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//动调得到的加密后的值,内存中就是小端储存我们不用再手动改变0EC311F0 45C79AF3 EDF5D910 542702CB</span>\n    <span class=\"token class-name\">uint32_t</span> v_part2<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0xEDF5D910</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x542702CB</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">uint32_t</span> <span class=\"token keyword\">const</span> k<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0x10203</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4050607</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8090A0B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0C0D0E0F</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//动调得到的key</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> r<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//num_rounds建议取值为32// v为要加密的数据是两个32位无符号整数// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位printf(\"加密前原始数据：%u %u\\\\n\",v[0],v[1]);</span>\n    <span class=\"token comment\">//encipher(r, v, k);</span>\n    <span class=\"token comment\">//printf(\"加密后的数据：%u %u\\\\n\",v[0],v[1]);</span>\n    <span class=\"token function\">decipher</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> v_part1<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">decipher</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> v_part2<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"解密后的数据：%x %x %x %x\\\\n\"</span><span class=\"token punctuation\">,</span>v_part1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>v_part1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v_part2<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v_part2<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://r9eglxl35.hn-bkt.clouddn.com//image-20220320015620390.png\" alt=\"image-20220320015620390\"></p>\n<p>最后按照开始分析的flag的格式排列一下得到flag{3bbcf9ea-2918-4fee-8a2e-201b47dfcb4e}</p>\n<p>最后贴上主函数内的函数作用：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">fmt_Fprintln：输出：“input flag<span class=\"token operator\">:</span>”\nfmt_Fscanf：接收flag\nmain_check：判断输入的字符是否符合这个正则表达式：flag<span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>a<span class=\"token operator\">-</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">8</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>a<span class=\"token operator\">-</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>a<span class=\"token operator\">-</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>a<span class=\"token operator\">-</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span>a<span class=\"token operator\">-</span>f<span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">12</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\nmain___myCipher__Encrypt：将输入的值进行XTEA加密，需要注意的是这里调用了两次加密函数，其实这里是将明文分成了两段分别进行加密\ninternal_bytealg_Equal：将加密后的值与结果进行比对<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","feature":false,"text":"GoEncryp2021虎符杯的re 1.基本信息探查：1.EXEinfo：64位，无壳 2.运行一下： 2.IDA分析：1.找思路：搜索主函数看到main_main： void __cdecl main_main() &#123; int v0; // edi __int64 ...","link":"","photos":[],"count_time":{"symbolsCount":"9.7k","symbolsTime":"9 mins."},"categories":[{"name":"Reverse","slug":"Reverse","count":11,"path":"api/categories/Reverse.json"}],"tags":[{"name":"WP","slug":"WP","count":12,"path":"api/tags/WP.json"},{"name":"算法实例分析","slug":"算法实例分析","count":7,"path":"api/tags/算法实例分析.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#GoEncryp\"><span class=\"toc-text\">GoEncryp</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%E6%8E%A2%E6%9F%A5%EF%BC%9A\"><span class=\"toc-text\">1.基本信息探查：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-EXEinfo%EF%BC%9A\"><span class=\"toc-text\">1.EXEinfo：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%8B%EF%BC%9A\"><span class=\"toc-text\">2.运行一下：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-IDA%E5%88%86%E6%9E%90%EF%BC%9A\"><span class=\"toc-text\">2.IDA分析：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%89%BE%E6%80%9D%E8%B7%AF%EF%BC%9A\"><span class=\"toc-text\">1.找思路：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-main-check%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90%EF%BC%9A\"><span class=\"toc-text\">2.main_check函数分析：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%AF%BB%E6%89%BEKEY%E5%80%BC%EF%BC%9A\"><span class=\"toc-text\">3.寻找KEY值：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E8%8E%B7%E5%8F%96%E5%8A%A0%E5%AF%86%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%9A\"><span class=\"toc-text\">4.获取加密后的数据：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-EXP%EF%BC%9A\"><span class=\"toc-text\">3.EXP：</span></a></li></ol></li></ol>","author":{"name":"Big Devils","slug":"blog-author","avatar":"http://r9eglxl35.hn-bkt.clouddn.com//-77bc1d189fd53f98.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"mapped":true,"prev_post":{"title":"XXTEA逆向题实例","uid":"a8384dcd7abc1e2fe2e53196d43f1b58","slug":"Reverse/XXTEA逆向题实例","date":"2022-03-19T18:00:29.000Z","updated":"2022-03-28T08:35:15.787Z","comments":true,"path":"api/articles/Reverse/XXTEA逆向题实例.json","keywords":null,"cover":"http://r9eglxl35.hn-bkt.clouddn.com//wallhaven-483vq1.jpg","text":"Apacha2021HGAME的re 1.基本信息探查：1.EXEinfo：无壳，64位，ELF文件格式 2.运行一下：输出了一个茶杯，这因该是官方给的一个提示，这个题可能用的是TEA加密 然后就是输出了一个字符串：“Please input:” 2.IDA分析：1.分析main...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"Reverse","slug":"Reverse","count":11,"path":"api/categories/Reverse.json"}],"tags":[{"name":"WP","slug":"WP","count":12,"path":"api/tags/WP.json"},{"name":"算法实例分析","slug":"算法实例分析","count":7,"path":"api/tags/算法实例分析.json"}],"author":{"name":"Big Devils","slug":"blog-author","avatar":"http://r9eglxl35.hn-bkt.clouddn.com//-77bc1d189fd53f98.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"feature":false},"next_post":{"title":"TEA逆向题实例2","uid":"12c143595e1666b762946cd5d7f66963","slug":"Reverse/TEA逆向题实例2","date":"2022-03-19T17:38:23.000Z","updated":"2022-03-28T08:35:15.793Z","comments":true,"path":"api/articles/Reverse/TEA逆向题实例2.json","keywords":null,"cover":"http://r9eglxl35.hn-bkt.clouddn.com//1219302.jpg","text":"Creak Me2022年HGAME的re 1.基本信息探查：1.EXEinfo：32位，无壳 2.运行一下：啥也没有 2.IDA分析：查看主函数： int __cdecl main(int argc, const char **argv, const char **envp) ...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"Reverse","slug":"Reverse","count":11,"path":"api/categories/Reverse.json"}],"tags":[{"name":"WP","slug":"WP","count":12,"path":"api/tags/WP.json"},{"name":"算法实例分析","slug":"算法实例分析","count":7,"path":"api/tags/算法实例分析.json"}],"author":{"name":"Big Devils","slug":"blog-author","avatar":"http://r9eglxl35.hn-bkt.clouddn.com//-77bc1d189fd53f98.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"feature":false}}