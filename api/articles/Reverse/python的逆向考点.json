{"title":"python的逆向考点","uid":"c34e721018d13d122ac641371d7bebf2","slug":"Reverse/python的逆向考点","date":"2022-03-15T07:25:10.000Z","updated":"2022-03-28T10:30:41.357Z","comments":true,"path":"api/articles/Reverse/python的逆向考点.json","keywords":null,"cover":"http://img.kofdevil.cn/boke/null1d5e489069.jpg","content":"<p>前置知识：</p>\n<p><a href=\"https://magnificent-syrup-61f.notion.site/python-9aaee637228d499fabe9d08731f12c38\">https://magnificent-syrup-61f.notion.site/python-9aaee637228d499fabe9d08731f12c38</a></p>\n<h1 id=\"考点一：pyc→py\"><a href=\"#考点一：pyc→py\" class=\"headerlink\" title=\"考点一：pyc→py\"></a>考点一：pyc→py</h1><h2 id=\"pyc转py的方法\"><a href=\"#pyc转py的方法\" class=\"headerlink\" title=\"pyc转py的方法\"></a>pyc转py的方法</h2><p>1.简单题一般可以用工具：uncompyle6，或者在线网站<a href=\"https://tool.lu/pyc%E7%9B%B4%E6%8E%A5%E8%BD%AC%E6%8D%A2%E6%88%90py%E6%BA%90%E4%BB%A3%E7%A0%81%E3%80%82\">https://tool.lu/pyc直接转换成py源代码。</a></p>\n<p>例题为：1.pyc、findkey.pyc。</p>\n<p>2.题目难一点的话会让你不能直接用工具反汇编出源代码，如2021年的蓝帽杯半决赛就有一道题目无法用工具直接反汇编出源代码，此时我们就需要对pyc的文件结构及它的结构体进行分析。(这个Part还没整明白)</p>\n<h2 id=\"For-Example\"><a href=\"#For-Example\" class=\"headerlink\" title=\"For Example:\"></a>For Example:</h2><h3 id=\"1-pyc解体思路：\"><a href=\"#1-pyc解体思路：\" class=\"headerlink\" title=\"1.pyc解体思路：\"></a>1.pyc解体思路：</h3><p>首先拿到的是一个pyc文件先尝试运行</p>\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315154101113.png\" alt=\"image-20220315154101113\"></p>\n<p>老套路让我们输入序列号，直接丢进在线反汇编网站：<a href=\"https://tool.lu/pyc\">https://tool.lu/pyc</a></p>\n<p>反汇编后的python源码为：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token comment\"># visit &lt;https://tool.lu/pyc/> for more information</span>\n<span class=\"token keyword\">import</span> base64\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    s <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> message<span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">32</span>\n        x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">16</span>\n        s <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\ncorrect <span class=\"token operator\">=</span> <span class=\"token string\">'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'</span>\nflag <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n<span class=\"token keyword\">print</span> <span class=\"token string\">'Input flag:'</span>\nflag <span class=\"token operator\">=</span> <span class=\"token builtin\">raw_input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> encode<span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> correct<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">'correct'</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">'wrong'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>代码的大概思路是将输入的字符串的每个元素与32异或再加上16，最后进行base64的加密。</p>\n<p>exp：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> base64\nrf <span class=\"token operator\">=</span> <span class=\"token string\">'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'</span>\n\nrflag <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>rf<span class=\"token punctuation\">)</span>\nflag<span class=\"token operator\">=</span><span class=\"token string\">''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>rflag<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> rflag<span class=\"token punctuation\">:</span>\n    x<span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">16</span>\n    x<span class=\"token operator\">=</span>x<span class=\"token operator\">^</span><span class=\"token number\">32</span>\n    flag<span class=\"token operator\">+=</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>flag为：nctf{d3c0mpil1n9_PyC}</p>\n<p>tips：</p>\n<p>在exp中一开始写了一个ord(i)-16,但是报错了，所以使用type查看了一下base64模块的返回值类型</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">look<span class=\"token operator\">=</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>rf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nflag<span class=\"token operator\">=</span><span class=\"token string\">''</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>look<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315154234673.png\" alt=\"image-20220315154234673\"></p>\n<p>可以看到返回的就是byte类型不需要转换了</p>\n<h1 id=\"考点二：\"><a href=\"#考点二：\" class=\"headerlink\" title=\"考点二：\"></a>考点二：</h1><h2 id=\"如何识别：\"><a href=\"#如何识别：\" class=\"headerlink\" title=\"如何识别：\"></a>如何识别：</h2><p>py文件可以通过某种方式编译为exe可执行程序。</p>\n<p>1.如何识别这是一个被打包的py文件呢：</p>\n<ul>\n<li><p>打开ida如果发现有很多python的字符串，那么基本就可以给它判刑了。<br><img src=\"http://img.kofdevil.cn/boke/image-20220315154558726.png\" alt=\"image-20220315154558726\"></p>\n</li>\n<li><p>工具打包后的exe图标一般都是一个样</p>\n</li>\n</ul>\n<p>2.目前常用的打包方式有两种：</p>\n<ul>\n<li>Py2exe</li>\n<li>Pyinstaller</li>\n</ul>\n<p>3.针对不同的打包方式有不同的提取方法：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">Py2exe<span class=\"token operator\">:</span> https<span class=\"token operator\">:</span><span class=\"token comment\">//github.com/matiasb/unpy2exe</span>\npyinstaller<span class=\"token operator\">:</span> https<span class=\"token operator\">:</span><span class=\"token comment\">//github.com/pyinstaller/pyinstaller</span>\n\t\t\t https<span class=\"token operator\">:</span><span class=\"token comment\">//github.com/extremecoders-re/pyinstxtractor</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"For-Example：-HWS计划-wp\"><a href=\"#For-Example：-HWS计划-wp\" class=\"headerlink\" title=\"For Example：(HWS计划 wp)\"></a>For Example：(HWS计划 wp)</h2><p>首先拿到程序“login.exe”直接运行看一下</p>\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315154919227.png\" alt=\"image-20220315154919227\"></p>\n<p>让我们输入password，输入错误会显示“nope！”</p>\n<p>扔到查壳工具里，是未加壳的64位程序</p>\n<p>ida64打开，直接查看字符串，这时就可以看到有很多与py有关的字串</p>\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315154939209.png\" alt=\"image-20220315154939209\"></p>\n<p>判断它是经过exe打包的py文件，但是无法确定它是用的哪种方式进行的打包，所以两种都试一下。</p>\n<p>首先尝试一下py2exe：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">python unpy2exe login<span class=\"token punctuation\">.</span>exe<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315155000186.png\" alt=\"image-20220315155000186\"></p>\n<p>这里可以看到它显示着不是py2exe打包的程序。那么接着尝试Pyinstaller：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">python pyinstxtractor<span class=\"token punctuation\">.</span>py login<span class=\"token punctuation\">.</span>exe<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>运行后显示提取成功，cmd内容如下：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">E<span class=\"token punctuation\">:</span>\\\\桌面\\\\seedle\\\\工具<span class=\"token operator\">></span>python pyinstxtractor<span class=\"token punctuation\">.</span>py login<span class=\"token punctuation\">.</span>exe\npyinstxtractor<span class=\"token punctuation\">.</span>py<span class=\"token punctuation\">:</span><span class=\"token number\">86</span><span class=\"token punctuation\">:</span> DeprecationWarning<span class=\"token punctuation\">:</span> the imp module <span class=\"token keyword\">is</span> deprecated <span class=\"token keyword\">in</span> favour of importlib<span class=\"token punctuation\">;</span> see the module's documentation <span class=\"token keyword\">for</span> alternative uses\n  <span class=\"token keyword\">import</span> imp\n<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> Processing login<span class=\"token punctuation\">.</span>exe\n<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> Pyinstaller version<span class=\"token punctuation\">:</span> <span class=\"token number\">2.1</span><span class=\"token operator\">+</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> Python version<span class=\"token punctuation\">:</span> <span class=\"token number\">27</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> Length of package<span class=\"token punctuation\">:</span> <span class=\"token number\">3701450</span> <span class=\"token builtin\">bytes</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> Found <span class=\"token number\">18</span> files <span class=\"token keyword\">in</span> CArchive\n<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> Beginning extraction<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>please standby\n<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Possible entry point<span class=\"token punctuation\">:</span> pyiboot01_bootstrap\n<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Possible entry point<span class=\"token punctuation\">:</span> login\n<span class=\"token punctuation\">[</span>!<span class=\"token punctuation\">]</span> Warning<span class=\"token punctuation\">:</span> The script <span class=\"token keyword\">is</span> running <span class=\"token keyword\">in</span> a different python version than the one used to build the executable\n    Run this script <span class=\"token keyword\">in</span> Python27 to prevent extraction errors<span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> during unmarshalling\n<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> Found <span class=\"token number\">194</span> files <span class=\"token keyword\">in</span> PYZ archive\n<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> Successfully extracted pyinstaller archive<span class=\"token punctuation\">:</span> login<span class=\"token punctuation\">.</span>exe\n\nYou can now use a python decompiler on the pyc files within the extracted directory<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>上面的回显显示提取出来的东西放在了exetracted目录下</p>\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315155024576.png\" alt=\"image-20220315155024576\"></p>\n<p>进入login.exe_extracted文件夹</p>\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315155041738.png\" alt=\"image-20220315155041738\"></p>\n<p>在这个文件夹中，我们要找的文件没有后缀名，也不在其他的文件夹中，这个文件夹我们要找的就是login。</p>\n<p>这里一开始的思路是手动添加“.pyc”尾缀，然后放到在线反编译网站上转py源文件，但是可以看到反编译失败，但是看它返回的错误的意思是部分反汇编失败。<img src=\"http://img.kofdevil.cn/boke/image-20220315155100262.png\" alt=\"image-20220315155100262\"></p>\n<p>这里百度得出的结果是提取出的文件缺失pyc文件的前面两个部分，一个是版本魔数，一个是创建时间</p>\n<p>把这个程序丢到二进制分析工具里面对比分析</p>\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315155120297.png\" alt=\"image-20220315155120297\"></p>\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315155129817.png\" alt=\"image-20220315155129817\"></p>\n<p>我们对比一下提取出来login文件和正常的文件的区别。</p>\n<p>正常的pyc文件是前面八个分别是四个字节版本魔数和四个字节的创建时间，之后才是PyCodeObject结构体</p>\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315155147447.png\" alt=\"image-20220315155147447\"></p>\n<p>而login文件是直接就是PyCodeObject结构体开头</p>\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315155205627.png\" alt=\"image-20220315155205627\"></p>\n<p>我们这里直接复制1.pyc的前面八个字节到login内，然后保存：</p>\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315155227161.png\" alt=\"image-20220315155227161\"></p>\n<p>此时再放到反编译网站就可以反编译成功了：</p>\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315155327537.png\" alt=\"image-20220315155327537\"></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n<span class=\"token comment\"># visit &lt;https://tool.lu/pyc/> for more information</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    target <span class=\"token operator\">=</span> <span class=\"token string\">'YWtmYHxgaGhjWHRzcmN+eg=='</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'base64'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> target<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n\na <span class=\"token operator\">=</span> <span class=\"token builtin\">raw_input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password:'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> check<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">'ok!'</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token string\">'nope!'</span>\n<span class=\"token builtin\">raw_input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>exp:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> base64\nrflag<span class=\"token operator\">=</span>base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span><span class=\"token string\">'YWtmYHxgaGhjWHRzcmN+eg=='</span><span class=\"token punctuation\">)</span>\nflag<span class=\"token operator\">=</span><span class=\"token string\">''</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>rflag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    flag<span class=\"token operator\">+=</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>rflag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">^</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"http://img.kofdevil.cn/boke/image-20220315155354595.png\" alt=\"image-20220315155354595\"></p>\n","feature":false,"text":"前置知识： https://magnificent-syrup-61f.notion.site/python-9aaee637228d499fabe9d08731f12c38 考点一：pyc→pypyc转py的方法1.简单题一般可以用工具：uncompyle6，或者在线网站htt...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"Reverse","slug":"Reverse","count":11,"path":"api/categories/Reverse.json"}],"tags":[{"name":"语言逆向","slug":"语言逆向","count":1,"path":"api/tags/语言逆向.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%80%83%E7%82%B9%E4%B8%80%EF%BC%9Apyc%E2%86%92py\"><span class=\"toc-text\">考点一：pyc→py</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#pyc%E8%BD%ACpy%E7%9A%84%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">pyc转py的方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#For-Example\"><span class=\"toc-text\">For Example:</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-pyc%E8%A7%A3%E4%BD%93%E6%80%9D%E8%B7%AF%EF%BC%9A\"><span class=\"toc-text\">1.pyc解体思路：</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%80%83%E7%82%B9%E4%BA%8C%EF%BC%9A\"><span class=\"toc-text\">考点二：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E8%AF%86%E5%88%AB%EF%BC%9A\"><span class=\"toc-text\">如何识别：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#For-Example%EF%BC%9A-HWS%E8%AE%A1%E5%88%92-wp\"><span class=\"toc-text\">For Example：(HWS计划 wp)</span></a></li></ol></li></ol>","author":{"name":"Big Devils","slug":"blog-author","avatar":"http://img.kofdevil.cn/boke/-77bc1d189fd53f98.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"mapped":true,"prev_post":{"title":"RC4算法分析及逆向特征","uid":"a9a1a1638fa879e93ed0cd1f92852131","slug":"Crypto/RC4算法分析及逆向特征","date":"2022-03-15T10:47:14.000Z","updated":"2022-03-28T10:30:41.354Z","comments":true,"path":"api/articles/Crypto/RC4算法分析及逆向特征.json","keywords":null,"cover":"http://img.kofdevil.cn/boke/luomiou1.png","text":"RC4算法分析一、RC4简介：RC4加密算法是密钥长度可变的流加密算法，其实就是生成一个密钥，然后去和明文XOR ，它还有一个特点就是它的密钥长度是可变的，范围是(1~256)字节。由此可以看出RC4算法的强度完全依赖于密钥的强度，如果获得密钥基本就可以直接获得明文。 二、算法原...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"Crypto","slug":"Crypto","count":4,"path":"api/categories/Crypto.json"}],"tags":[{"name":"reverse常见算法","slug":"reverse常见算法","count":3,"path":"api/tags/reverse常见算法.json"}],"author":{"name":"Big Devils","slug":"blog-author","avatar":"http://img.kofdevil.cn/boke/-77bc1d189fd53f98.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"feature":false},"next_post":{"title":"Crypto脑图","uid":"3fffde4c087696455aa9600680b2d3ff","slug":"Crypto/Crypto脑图","date":"2022-03-15T07:17:46.000Z","updated":"2022-03-28T10:30:41.355Z","comments":true,"path":"api/articles/Crypto/Crypto脑图.json","keywords":null,"cover":"http://img.kofdevil.cn/boke/mmexport16071984.jpg","text":"加密一般分为对称加密(Symmetric Key Encryption)和非对称加密(Asymmetric Key Encryption)。 对称加密又分为分组加密和序列密码。 分组密码，也叫块加密(block cyphers)，一次加密明文中的一个块。是将明文按一定的位长分组，...","link":"","photos":[],"count_time":{"symbolsCount":276,"symbolsTime":"1 mins."},"categories":[{"name":"Crypto","slug":"Crypto","count":4,"path":"api/categories/Crypto.json"}],"tags":[],"author":{"name":"Big Devils","slug":"blog-author","avatar":"http://img.kofdevil.cn/boke/-77bc1d189fd53f98.jpg","link":"/","description":"整个博客督促自己学习<br>CrackMe笔记放在吾爱上<br>BUUOJ的做题笔记在看雪上","socials":{"github":"https://github.com/damowang-cxx","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"52pojie":{"icon":"/svg/noa.svg","link":"https://www.52pojie.cn/forum.php?mod=viewthread&tid=1609332&page=1#pid42026727"},"kanxue":{"icon":"/svg/images.svg","link":"https://bbs.pediy.com/user-920613-1.htm"}}}},"feature":false}}