{"title":"md5算法分析","uid":"0c474fb1f1d514e490492b4c7d30611c","slug":"md5算法分析","date":"2022-03-15T01:45:46.000Z","updated":"2022-03-15T03:08:44.272Z","comments":true,"path":"api/articles/md5算法分析.json","keywords":null,"cover":"https://gitee.com/gitgit1/cloudimage/raw/master/img/IMG_20210803_005143.jpg","content":"<p>前言：MD5消息摘要算法(Message Digest Algorithm)，它对输入的任意长度的消息进行运算，产生一个128位的消息摘要。</p>\n<h2 id=\"算法原理：\"><a href=\"#算法原理：\" class=\"headerlink\" title=\"算法原理：\"></a>算法原理：</h2><h3 id=\"1-数据填充：\"><a href=\"#1-数据填充：\" class=\"headerlink\" title=\"1.数据填充：\"></a>1.数据填充：</h3><p>对原数据进行消息填充，使其长度取余512余448(448 mod 512)。换句话说就是填充后的数据长度比512的倍数小64位。并且这个数据填充是必做的操作，其实数据正好与448模512同余,也要填充。填充的动作是：附一个1在消息后面，然后用0来填充，直到消息的长度与448模512同余。至少填充1位，至多填充512位。</p>\n<h3 id=\"2-添加长度：-这里和前面一步又呼应，多的448-64正好512\"><a href=\"#2-添加长度：-这里和前面一步又呼应，多的448-64正好512\" class=\"headerlink\" title=\"2.添加长度：(这里和前面一步又呼应，多的448+64正好512)\"></a>2.添加长度：(这里和前面一步又呼应，多的448+64正好512)</h3><p>将上一步的结果附上64位的原数据长度，但如果要填充的原数据长度超过了2^64(本来就只有64字节给它放长度)则用原数据的低64位作为数据填充。(反正到这里得把数据弄到512的整数倍)</p>\n<h3 id=\"3-初始化变量：\"><a href=\"#3-初始化变量：\" class=\"headerlink\" title=\"3.初始化变量：\"></a>3.初始化变量：</h3><p>用4个变量(A、B、C、D)计算消息摘要，这四个都是大小为32位的寄存器，这些寄存器根据下面的值进行初始化：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">A <span class=\"token operator\">=</span> <span class=\"token number\">01234567</span>h\nB <span class=\"token operator\">=</span> <span class=\"token number\">89</span>ABCDEFh\nC <span class=\"token operator\">=</span> FEDCBA98h\nD <span class=\"token operator\">=</span> <span class=\"token number\">76543210</span>h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">A <span class=\"token operator\">=</span> <span class=\"token number\">0x67452301</span>h\nB <span class=\"token operator\">=</span> <span class=\"token number\">0xEFCDAB89</span>h\nC <span class=\"token operator\">=</span> <span class=\"token number\">0x98BADCFE</span>h\nD <span class=\"token operator\">=</span> <span class=\"token number\">0x10325476</span>h<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"4-数据处理：\"><a href=\"#4-数据处理：\" class=\"headerlink\" title=\"4.数据处理：\"></a>4.数据处理：</h3><p>接着将处理后的数据以512位为一组进行运算，首先定义四个辅助函数，每个都是以3个32位双字作为输入，输出1个32位双字。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">F</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>Y<span class=\"token punctuation\">,</span>Z<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>X <span class=\"token operator\">&amp;</span> Y<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>X<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> Z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">G</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>Y<span class=\"token punctuation\">,</span>Z<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>X <span class=\"token operator\">&amp;</span> Z<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>Y <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>Z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">H</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>Y<span class=\"token punctuation\">,</span>Z<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>X <span class=\"token operator\">^</span> Y <span class=\"token operator\">^</span> Z<span class=\"token punctuation\">;</span>\n<span class=\"token function\">I</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>Y<span class=\"token punctuation\">,</span>Z<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>Y <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span>X <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>Z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<a href=\"/post/md5%E9%80%86%E5%90%91%E9%A2%98%E5%AE%9E%E4%BE%8B.html\" title=\"md5逆向题实例\">md5逆向题实例</a>\n","feature":true,"text":"前言：MD5消息摘要算法(Message Digest Algorithm)，它对输入的任意长度的消息进行运算，产生一个128位的消息摘要。 算法原理：1.数据填充：对原数据进行消息填充，使其长度取余512余448(448 mod 512)。换句话说就是填充后的数据长度比512的...","link":"","photos":[],"count_time":{"symbolsCount":755,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"reverse常见算法","slug":"reverse常见算法","count":1,"path":"api/tags/reverse常见算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%EF%BC%9A\"><span class=\"toc-text\">算法原理：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E6%95%B0%E6%8D%AE%E5%A1%AB%E5%85%85%EF%BC%9A\"><span class=\"toc-text\">1.数据填充：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%B7%BB%E5%8A%A0%E9%95%BF%E5%BA%A6%EF%BC%9A-%E8%BF%99%E9%87%8C%E5%92%8C%E5%89%8D%E9%9D%A2%E4%B8%80%E6%AD%A5%E5%8F%88%E5%91%BC%E5%BA%94%EF%BC%8C%E5%A4%9A%E7%9A%84448-64%E6%AD%A3%E5%A5%BD512\"><span class=\"toc-text\">2.添加长度：(这里和前面一步又呼应，多的448+64正好512)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%98%E9%87%8F%EF%BC%9A\"><span class=\"toc-text\">3.初始化变量：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%EF%BC%9A\"><span class=\"toc-text\">4.数据处理：</span></a></li></ol></li></ol>","author":{"name":"Big Devils","slug":"blog-author","avatar":"https://gitee.com/gitgit1/cloudimage/raw/master/img/-77bc1d189fd53f98.jpg","link":"/","description":"大魔王的reverse比赛记录","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"2022年2月PragyanCTF比赛记录","uid":"dbf28d0c1562fa16371756c5d1c38cce","slug":"2022年2月PragyanCTF比赛记录","date":"2022-03-14T16:50:11.000Z","updated":"2022-03-15T01:28:59.984Z","comments":true,"path":"api/articles/2022年2月PragyanCTF比赛记录.json","keywords":null,"cover":"https://gitee.com/gitgit1/cloudimage/raw/master/img/IMG_20210927_062014.jpg","text":" Reverse 考点 Oak java源代码，算法逆向 Oak 题目描述 Just little understanding of java would be enough Oak.class。 源代码： // // Source code recreated from a ....","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"比赛记录","slug":"比赛记录","count":2,"path":"api/tags/比赛记录.json"}],"author":{"name":"Big Devils","slug":"blog-author","avatar":"https://gitee.com/gitgit1/cloudimage/raw/master/img/-77bc1d189fd53f98.jpg","link":"/","description":"大魔王的reverse比赛记录","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}